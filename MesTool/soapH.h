/* soapH.h
   Generated by gSOAP 2.8.63 for MESWebService.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (::soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SubmitResult_ResultTable_DEFINED
#define SOAP_TYPE__ns1__SubmitResult_ResultTable_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SubmitResult_ResultTable(struct soap*, const char*, int, const _ns1__SubmitResult_ResultTable *, const char*);
SOAP_FMAC3 _ns1__SubmitResult_ResultTable * SOAP_FMAC4 soap_in__ns1__SubmitResult_ResultTable(struct soap*, const char*, _ns1__SubmitResult_ResultTable *, const char*);
SOAP_FMAC1 _ns1__SubmitResult_ResultTable * SOAP_FMAC2 soap_instantiate__ns1__SubmitResult_ResultTable(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SubmitResult_ResultTable * soap_new__ns1__SubmitResult_ResultTable(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SubmitResult_ResultTable(soap, n, NULL, NULL, NULL);
}

inline _ns1__SubmitResult_ResultTable * soap_new_req__ns1__SubmitResult_ResultTable(
	struct soap *soap)
{
	_ns1__SubmitResult_ResultTable *_p = ::soap_new__ns1__SubmitResult_ResultTable(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SubmitResult_ResultTable * soap_new_set__ns1__SubmitResult_ResultTable(
	struct soap *soap,
	const std::vector<char *> & __any,
	char *__any_)
{
	_ns1__SubmitResult_ResultTable *_p = ::soap_new__ns1__SubmitResult_ResultTable(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SubmitResult_ResultTable::__any = __any;
		_p->_ns1__SubmitResult_ResultTable::__any_ = __any_;
	}
	return _p;
}

inline int soap_write__ns1__SubmitResult_ResultTable(struct soap *soap, _ns1__SubmitResult_ResultTable const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult-ResultTable", p->soap_type() == SOAP_TYPE__ns1__SubmitResult_ResultTable ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SubmitResult_ResultTable(struct soap *soap, const char *URL, _ns1__SubmitResult_ResultTable const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult-ResultTable", p->soap_type() == SOAP_TYPE__ns1__SubmitResult_ResultTable ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SubmitResult_ResultTable(struct soap *soap, const char *URL, _ns1__SubmitResult_ResultTable const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult-ResultTable", p->soap_type() == SOAP_TYPE__ns1__SubmitResult_ResultTable ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SubmitResult_ResultTable * SOAP_FMAC4 soap_get__ns1__SubmitResult_ResultTable(struct soap*, _ns1__SubmitResult_ResultTable *, const char*, const char*);

inline int soap_read__ns1__SubmitResult_ResultTable(struct soap *soap, _ns1__SubmitResult_ResultTable *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SubmitResult_ResultTable(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SubmitResult_ResultTable(struct soap *soap, const char *URL, _ns1__SubmitResult_ResultTable *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SubmitResult_ResultTable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SubmitResult_ResultTable(struct soap *soap, _ns1__SubmitResult_ResultTable *p)
{
	if (::soap_read__ns1__SubmitResult_ResultTable(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__LoginResponse_DEFINED
#define SOAP_TYPE__ns1__LoginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap*, const char*, int, const _ns1__LoginResponse *, const char*);
SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap*, const char*, _ns1__LoginResponse *, const char*);
SOAP_FMAC1 _ns1__LoginResponse * SOAP_FMAC2 soap_instantiate__ns1__LoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__LoginResponse * soap_new__ns1__LoginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__LoginResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__LoginResponse * soap_new_req__ns1__LoginResponse(
	struct soap *soap)
{
	_ns1__LoginResponse *_p = ::soap_new__ns1__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__LoginResponse * soap_new_set__ns1__LoginResponse(
	struct soap *soap,
	ns1__SubmitResult *LoginResult)
{
	_ns1__LoginResponse *_p = ::soap_new__ns1__LoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__LoginResponse::LoginResult = LoginResult;
	}
	return _p;
}

inline int soap_write__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginResponse", p->soap_type() == SOAP_TYPE__ns1__LoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__LoginResponse(struct soap *soap, const char *URL, _ns1__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginResponse", p->soap_type() == SOAP_TYPE__ns1__LoginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__LoginResponse(struct soap *soap, const char *URL, _ns1__LoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginResponse", p->soap_type() == SOAP_TYPE__ns1__LoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap*, _ns1__LoginResponse *, const char*, const char*);

inline int soap_read__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__LoginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__LoginResponse(struct soap *soap, const char *URL, _ns1__LoginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__LoginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p)
{
	if (::soap_read__ns1__LoginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Login_DEFINED
#define SOAP_TYPE__ns1__Login_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap*, const char*, int, const _ns1__Login *, const char*);
SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap*, const char*, _ns1__Login *, const char*);
SOAP_FMAC1 _ns1__Login * SOAP_FMAC2 soap_instantiate__ns1__Login(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Login * soap_new__ns1__Login(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Login(soap, n, NULL, NULL, NULL);
}

inline _ns1__Login * soap_new_req__ns1__Login(
	struct soap *soap)
{
	_ns1__Login *_p = ::soap_new__ns1__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Login * soap_new_set__ns1__Login(
	struct soap *soap,
	std::string *UserName)
{
	_ns1__Login *_p = ::soap_new__ns1__Login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Login::UserName = UserName;
	}
	return _p;
}

inline int soap_write__ns1__Login(struct soap *soap, _ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Login", p->soap_type() == SOAP_TYPE__ns1__Login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Login(struct soap *soap, const char *URL, _ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Login", p->soap_type() == SOAP_TYPE__ns1__Login ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Login(struct soap *soap, const char *URL, _ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Login", p->soap_type() == SOAP_TYPE__ns1__Login ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap*, _ns1__Login *, const char*, const char*);

inline int soap_read__ns1__Login(struct soap *soap, _ns1__Login *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Login(struct soap *soap, const char *URL, _ns1__Login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Login(struct soap *soap, _ns1__Login *p)
{
	if (::soap_read__ns1__Login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CanLoginResponse_DEFINED
#define SOAP_TYPE__ns1__CanLoginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CanLoginResponse(struct soap*, const char*, int, const _ns1__CanLoginResponse *, const char*);
SOAP_FMAC3 _ns1__CanLoginResponse * SOAP_FMAC4 soap_in__ns1__CanLoginResponse(struct soap*, const char*, _ns1__CanLoginResponse *, const char*);
SOAP_FMAC1 _ns1__CanLoginResponse * SOAP_FMAC2 soap_instantiate__ns1__CanLoginResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CanLoginResponse * soap_new__ns1__CanLoginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CanLoginResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CanLoginResponse * soap_new_req__ns1__CanLoginResponse(
	struct soap *soap)
{
	_ns1__CanLoginResponse *_p = ::soap_new__ns1__CanLoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CanLoginResponse * soap_new_set__ns1__CanLoginResponse(
	struct soap *soap,
	ns1__SubmitResult *CanLoginResult)
{
	_ns1__CanLoginResponse *_p = ::soap_new__ns1__CanLoginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CanLoginResponse::CanLoginResult = CanLoginResult;
	}
	return _p;
}

inline int soap_write__ns1__CanLoginResponse(struct soap *soap, _ns1__CanLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLoginResponse", p->soap_type() == SOAP_TYPE__ns1__CanLoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CanLoginResponse(struct soap *soap, const char *URL, _ns1__CanLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLoginResponse", p->soap_type() == SOAP_TYPE__ns1__CanLoginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CanLoginResponse(struct soap *soap, const char *URL, _ns1__CanLoginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLoginResponse", p->soap_type() == SOAP_TYPE__ns1__CanLoginResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CanLoginResponse * SOAP_FMAC4 soap_get__ns1__CanLoginResponse(struct soap*, _ns1__CanLoginResponse *, const char*, const char*);

inline int soap_read__ns1__CanLoginResponse(struct soap *soap, _ns1__CanLoginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CanLoginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CanLoginResponse(struct soap *soap, const char *URL, _ns1__CanLoginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CanLoginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CanLoginResponse(struct soap *soap, _ns1__CanLoginResponse *p)
{
	if (::soap_read__ns1__CanLoginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CanLogin_DEFINED
#define SOAP_TYPE__ns1__CanLogin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CanLogin(struct soap*, const char*, int, const _ns1__CanLogin *, const char*);
SOAP_FMAC3 _ns1__CanLogin * SOAP_FMAC4 soap_in__ns1__CanLogin(struct soap*, const char*, _ns1__CanLogin *, const char*);
SOAP_FMAC1 _ns1__CanLogin * SOAP_FMAC2 soap_instantiate__ns1__CanLogin(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CanLogin * soap_new__ns1__CanLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CanLogin(soap, n, NULL, NULL, NULL);
}

inline _ns1__CanLogin * soap_new_req__ns1__CanLogin(
	struct soap *soap)
{
	_ns1__CanLogin *_p = ::soap_new__ns1__CanLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__CanLogin * soap_new_set__ns1__CanLogin(
	struct soap *soap,
	std::string *strUsername,
	std::string *strPassword)
{
	_ns1__CanLogin *_p = ::soap_new__ns1__CanLogin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CanLogin::strUsername = strUsername;
		_p->_ns1__CanLogin::strPassword = strPassword;
	}
	return _p;
}

inline int soap_write__ns1__CanLogin(struct soap *soap, _ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLogin", p->soap_type() == SOAP_TYPE__ns1__CanLogin ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__CanLogin(struct soap *soap, const char *URL, _ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLogin", p->soap_type() == SOAP_TYPE__ns1__CanLogin ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__CanLogin(struct soap *soap, const char *URL, _ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CanLogin", p->soap_type() == SOAP_TYPE__ns1__CanLogin ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CanLogin * SOAP_FMAC4 soap_get__ns1__CanLogin(struct soap*, _ns1__CanLogin *, const char*, const char*);

inline int soap_read__ns1__CanLogin(struct soap *soap, _ns1__CanLogin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__CanLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__CanLogin(struct soap *soap, const char *URL, _ns1__CanLogin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__CanLogin(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__CanLogin(struct soap *soap, _ns1__CanLogin *p)
{
	if (::soap_read__ns1__CanLogin(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse_DEFINED
#define SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap*, const char*, int, const _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *, const char*);
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * SOAP_FMAC4 soap_in__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap*, const char*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *, const char*);
SOAP_FMAC1 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * SOAP_FMAC2 soap_instantiate__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * soap_new_req__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(
	struct soap *soap)
{
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *_p = ::soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * soap_new_set__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(
	struct soap *soap,
	std::string *Upload_USCOREFIDWUL_USCOREDATAFLAGsResult)
{
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *_p = ::soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse::Upload_USCOREFIDWUL_USCOREDATAFLAGsResult = Upload_USCOREFIDWUL_USCOREDATAFLAGsResult;
	}
	return _p;
}

inline int soap_write__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGsResponse", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGsResponse", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGsResponse", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse * SOAP_FMAC4 soap_get__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *, const char*, const char*);

inline int soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse *p)
{
	if (::soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGsResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
#define SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char*, int, const _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*);
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC4 soap_in__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*);
SOAP_FMAC1 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC2 soap_instantiate__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, n, NULL, NULL, NULL);
}

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new_req__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(
	struct soap *soap)
{
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *_p = ::soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new_set__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(
	struct soap *soap,
	ns1__ArrayOfFIDailyWorkReturnEntity *list)
{
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *_p = ::soap_new__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs::list = list;
	}
	return _p;
}

inline int soap_write__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGs", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGs", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Upload_FIDWUL_DATAFLAGs", p->soap_type() == SOAP_TYPE__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC4 soap_get__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*, const char*);

inline int soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (::soap_read__ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetMaterialBatchResultToMESResponse_DEFINED
#define SOAP_TYPE__ns1__SetMaterialBatchResultToMESResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMaterialBatchResultToMESResponse(struct soap*, const char*, int, const _ns1__SetMaterialBatchResultToMESResponse *, const char*);
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMESResponse * SOAP_FMAC4 soap_in__ns1__SetMaterialBatchResultToMESResponse(struct soap*, const char*, _ns1__SetMaterialBatchResultToMESResponse *, const char*);
SOAP_FMAC1 _ns1__SetMaterialBatchResultToMESResponse * SOAP_FMAC2 soap_instantiate__ns1__SetMaterialBatchResultToMESResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMaterialBatchResultToMESResponse * soap_new__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetMaterialBatchResultToMESResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetMaterialBatchResultToMESResponse * soap_new_req__ns1__SetMaterialBatchResultToMESResponse(
	struct soap *soap)
{
	_ns1__SetMaterialBatchResultToMESResponse *_p = ::soap_new__ns1__SetMaterialBatchResultToMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetMaterialBatchResultToMESResponse * soap_new_set__ns1__SetMaterialBatchResultToMESResponse(
	struct soap *soap,
	ns1__ArrayOfSubmitResult *SetMaterialBatchResultToMESResult)
{
	_ns1__SetMaterialBatchResultToMESResponse *_p = ::soap_new__ns1__SetMaterialBatchResultToMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMaterialBatchResultToMESResponse::SetMaterialBatchResultToMESResult = SetMaterialBatchResultToMESResult;
	}
	return _p;
}

inline int soap_write__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, _ns1__SetMaterialBatchResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMESResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMESResponse * SOAP_FMAC4 soap_get__ns1__SetMaterialBatchResultToMESResponse(struct soap*, _ns1__SetMaterialBatchResultToMESResponse *, const char*, const char*);

inline int soap_read__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, _ns1__SetMaterialBatchResultToMESResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SetMaterialBatchResultToMESResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMESResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SetMaterialBatchResultToMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetMaterialBatchResultToMESResponse(struct soap *soap, _ns1__SetMaterialBatchResultToMESResponse *p)
{
	if (::soap_read__ns1__SetMaterialBatchResultToMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetMaterialBatchResultToMES_DEFINED
#define SOAP_TYPE__ns1__SetMaterialBatchResultToMES_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetMaterialBatchResultToMES(struct soap*, const char*, int, const _ns1__SetMaterialBatchResultToMES *, const char*);
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMES * SOAP_FMAC4 soap_in__ns1__SetMaterialBatchResultToMES(struct soap*, const char*, _ns1__SetMaterialBatchResultToMES *, const char*);
SOAP_FMAC1 _ns1__SetMaterialBatchResultToMES * SOAP_FMAC2 soap_instantiate__ns1__SetMaterialBatchResultToMES(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetMaterialBatchResultToMES * soap_new__ns1__SetMaterialBatchResultToMES(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetMaterialBatchResultToMES(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetMaterialBatchResultToMES * soap_new_req__ns1__SetMaterialBatchResultToMES(
	struct soap *soap)
{
	_ns1__SetMaterialBatchResultToMES *_p = ::soap_new__ns1__SetMaterialBatchResultToMES(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetMaterialBatchResultToMES * soap_new_set__ns1__SetMaterialBatchResultToMES(
	struct soap *soap,
	std::string *UserName,
	std::string *Password,
	ns1__ArrayOfMaterialBatchResultInfo *lstMaterialBatchResultInfo)
{
	_ns1__SetMaterialBatchResultToMES *_p = ::soap_new__ns1__SetMaterialBatchResultToMES(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetMaterialBatchResultToMES::UserName = UserName;
		_p->_ns1__SetMaterialBatchResultToMES::Password = Password;
		_p->_ns1__SetMaterialBatchResultToMES::lstMaterialBatchResultInfo = lstMaterialBatchResultInfo;
	}
	return _p;
}

inline int soap_write__ns1__SetMaterialBatchResultToMES(struct soap *soap, _ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMES ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMES ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetMaterialBatchResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetMaterialBatchResultToMES ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMES * SOAP_FMAC4 soap_get__ns1__SetMaterialBatchResultToMES(struct soap*, _ns1__SetMaterialBatchResultToMES *, const char*, const char*);

inline int soap_read__ns1__SetMaterialBatchResultToMES(struct soap *soap, _ns1__SetMaterialBatchResultToMES *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SetMaterialBatchResultToMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, _ns1__SetMaterialBatchResultToMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SetMaterialBatchResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetMaterialBatchResultToMES(struct soap *soap, _ns1__SetMaterialBatchResultToMES *p)
{
	if (::soap_read__ns1__SetMaterialBatchResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetDefectResultToMESResponse_DEFINED
#define SOAP_TYPE__ns1__SetDefectResultToMESResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetDefectResultToMESResponse(struct soap*, const char*, int, const _ns1__SetDefectResultToMESResponse *, const char*);
SOAP_FMAC3 _ns1__SetDefectResultToMESResponse * SOAP_FMAC4 soap_in__ns1__SetDefectResultToMESResponse(struct soap*, const char*, _ns1__SetDefectResultToMESResponse *, const char*);
SOAP_FMAC1 _ns1__SetDefectResultToMESResponse * SOAP_FMAC2 soap_instantiate__ns1__SetDefectResultToMESResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetDefectResultToMESResponse * soap_new__ns1__SetDefectResultToMESResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetDefectResultToMESResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetDefectResultToMESResponse * soap_new_req__ns1__SetDefectResultToMESResponse(
	struct soap *soap)
{
	_ns1__SetDefectResultToMESResponse *_p = ::soap_new__ns1__SetDefectResultToMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetDefectResultToMESResponse * soap_new_set__ns1__SetDefectResultToMESResponse(
	struct soap *soap,
	ns1__ArrayOfSubmitResult *SetDefectResultToMESResult)
{
	_ns1__SetDefectResultToMESResponse *_p = ::soap_new__ns1__SetDefectResultToMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetDefectResultToMESResponse::SetDefectResultToMESResult = SetDefectResultToMESResult;
	}
	return _p;
}

inline int soap_write__ns1__SetDefectResultToMESResponse(struct soap *soap, _ns1__SetDefectResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetDefectResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetDefectResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMESResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetDefectResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetDefectResultToMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMESResponse", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetDefectResultToMESResponse * SOAP_FMAC4 soap_get__ns1__SetDefectResultToMESResponse(struct soap*, _ns1__SetDefectResultToMESResponse *, const char*, const char*);

inline int soap_read__ns1__SetDefectResultToMESResponse(struct soap *soap, _ns1__SetDefectResultToMESResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SetDefectResultToMESResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetDefectResultToMESResponse(struct soap *soap, const char *URL, _ns1__SetDefectResultToMESResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SetDefectResultToMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetDefectResultToMESResponse(struct soap *soap, _ns1__SetDefectResultToMESResponse *p)
{
	if (::soap_read__ns1__SetDefectResultToMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SetDefectResultToMES_DEFINED
#define SOAP_TYPE__ns1__SetDefectResultToMES_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetDefectResultToMES(struct soap*, const char*, int, const _ns1__SetDefectResultToMES *, const char*);
SOAP_FMAC3 _ns1__SetDefectResultToMES * SOAP_FMAC4 soap_in__ns1__SetDefectResultToMES(struct soap*, const char*, _ns1__SetDefectResultToMES *, const char*);
SOAP_FMAC1 _ns1__SetDefectResultToMES * SOAP_FMAC2 soap_instantiate__ns1__SetDefectResultToMES(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetDefectResultToMES * soap_new__ns1__SetDefectResultToMES(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SetDefectResultToMES(soap, n, NULL, NULL, NULL);
}

inline _ns1__SetDefectResultToMES * soap_new_req__ns1__SetDefectResultToMES(
	struct soap *soap)
{
	_ns1__SetDefectResultToMES *_p = ::soap_new__ns1__SetDefectResultToMES(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SetDefectResultToMES * soap_new_set__ns1__SetDefectResultToMES(
	struct soap *soap,
	std::string *UserName,
	std::string *Password,
	ns1__ArrayOfDefectResultInfo *lstDefectResultInfo)
{
	_ns1__SetDefectResultToMES *_p = ::soap_new__ns1__SetDefectResultToMES(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SetDefectResultToMES::UserName = UserName;
		_p->_ns1__SetDefectResultToMES::Password = Password;
		_p->_ns1__SetDefectResultToMES::lstDefectResultInfo = lstDefectResultInfo;
	}
	return _p;
}

inline int soap_write__ns1__SetDefectResultToMES(struct soap *soap, _ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMES ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SetDefectResultToMES(struct soap *soap, const char *URL, _ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMES ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SetDefectResultToMES(struct soap *soap, const char *URL, _ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SetDefectResultToMES", p->soap_type() == SOAP_TYPE__ns1__SetDefectResultToMES ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SetDefectResultToMES * SOAP_FMAC4 soap_get__ns1__SetDefectResultToMES(struct soap*, _ns1__SetDefectResultToMES *, const char*, const char*);

inline int soap_read__ns1__SetDefectResultToMES(struct soap *soap, _ns1__SetDefectResultToMES *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SetDefectResultToMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SetDefectResultToMES(struct soap *soap, const char *URL, _ns1__SetDefectResultToMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SetDefectResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SetDefectResultToMES(struct soap *soap, _ns1__SetDefectResultToMES *p)
{
	if (::soap_read__ns1__SetDefectResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetDefectInfoToSAPResponse_DEFINED
#define SOAP_TYPE__ns1__GetDefectInfoToSAPResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDefectInfoToSAPResponse(struct soap*, const char*, int, const _ns1__GetDefectInfoToSAPResponse *, const char*);
SOAP_FMAC3 _ns1__GetDefectInfoToSAPResponse * SOAP_FMAC4 soap_in__ns1__GetDefectInfoToSAPResponse(struct soap*, const char*, _ns1__GetDefectInfoToSAPResponse *, const char*);
SOAP_FMAC1 _ns1__GetDefectInfoToSAPResponse * SOAP_FMAC2 soap_instantiate__ns1__GetDefectInfoToSAPResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetDefectInfoToSAPResponse * soap_new__ns1__GetDefectInfoToSAPResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetDefectInfoToSAPResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetDefectInfoToSAPResponse * soap_new_req__ns1__GetDefectInfoToSAPResponse(
	struct soap *soap)
{
	_ns1__GetDefectInfoToSAPResponse *_p = ::soap_new__ns1__GetDefectInfoToSAPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetDefectInfoToSAPResponse * soap_new_set__ns1__GetDefectInfoToSAPResponse(
	struct soap *soap,
	ns1__SubmitResult *GetDefectInfoToSAPResult)
{
	_ns1__GetDefectInfoToSAPResponse *_p = ::soap_new__ns1__GetDefectInfoToSAPResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetDefectInfoToSAPResponse::GetDefectInfoToSAPResult = GetDefectInfoToSAPResult;
	}
	return _p;
}

inline int soap_write__ns1__GetDefectInfoToSAPResponse(struct soap *soap, _ns1__GetDefectInfoToSAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAPResponse", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAPResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetDefectInfoToSAPResponse(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAPResponse", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAPResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetDefectInfoToSAPResponse(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAPResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAPResponse", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAPResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetDefectInfoToSAPResponse * SOAP_FMAC4 soap_get__ns1__GetDefectInfoToSAPResponse(struct soap*, _ns1__GetDefectInfoToSAPResponse *, const char*, const char*);

inline int soap_read__ns1__GetDefectInfoToSAPResponse(struct soap *soap, _ns1__GetDefectInfoToSAPResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetDefectInfoToSAPResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetDefectInfoToSAPResponse(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAPResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetDefectInfoToSAPResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetDefectInfoToSAPResponse(struct soap *soap, _ns1__GetDefectInfoToSAPResponse *p)
{
	if (::soap_read__ns1__GetDefectInfoToSAPResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetDefectInfoToSAP_DEFINED
#define SOAP_TYPE__ns1__GetDefectInfoToSAP_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetDefectInfoToSAP(struct soap*, const char*, int, const _ns1__GetDefectInfoToSAP *, const char*);
SOAP_FMAC3 _ns1__GetDefectInfoToSAP * SOAP_FMAC4 soap_in__ns1__GetDefectInfoToSAP(struct soap*, const char*, _ns1__GetDefectInfoToSAP *, const char*);
SOAP_FMAC1 _ns1__GetDefectInfoToSAP * SOAP_FMAC2 soap_instantiate__ns1__GetDefectInfoToSAP(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetDefectInfoToSAP * soap_new__ns1__GetDefectInfoToSAP(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetDefectInfoToSAP(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetDefectInfoToSAP * soap_new_req__ns1__GetDefectInfoToSAP(
	struct soap *soap)
{
	_ns1__GetDefectInfoToSAP *_p = ::soap_new__ns1__GetDefectInfoToSAP(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetDefectInfoToSAP * soap_new_set__ns1__GetDefectInfoToSAP(
	struct soap *soap,
	std::string *UserName,
	std::string *Password)
{
	_ns1__GetDefectInfoToSAP *_p = ::soap_new__ns1__GetDefectInfoToSAP(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetDefectInfoToSAP::UserName = UserName;
		_p->_ns1__GetDefectInfoToSAP::Password = Password;
	}
	return _p;
}

inline int soap_write__ns1__GetDefectInfoToSAP(struct soap *soap, _ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAP", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAP ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAP", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAP ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetDefectInfoToSAP", p->soap_type() == SOAP_TYPE__ns1__GetDefectInfoToSAP ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetDefectInfoToSAP * SOAP_FMAC4 soap_get__ns1__GetDefectInfoToSAP(struct soap*, _ns1__GetDefectInfoToSAP *, const char*, const char*);

inline int soap_read__ns1__GetDefectInfoToSAP(struct soap *soap, _ns1__GetDefectInfoToSAP *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetDefectInfoToSAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, _ns1__GetDefectInfoToSAP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetDefectInfoToSAP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetDefectInfoToSAP(struct soap *soap, _ns1__GetDefectInfoToSAP *p)
{
	if (::soap_read__ns1__GetDefectInfoToSAP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFtpAddressResponse_DEFINED
#define SOAP_TYPE__ns1__GetFtpAddressResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFtpAddressResponse(struct soap*, const char*, int, const _ns1__GetFtpAddressResponse *, const char*);
SOAP_FMAC3 _ns1__GetFtpAddressResponse * SOAP_FMAC4 soap_in__ns1__GetFtpAddressResponse(struct soap*, const char*, _ns1__GetFtpAddressResponse *, const char*);
SOAP_FMAC1 _ns1__GetFtpAddressResponse * SOAP_FMAC2 soap_instantiate__ns1__GetFtpAddressResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFtpAddressResponse * soap_new__ns1__GetFtpAddressResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFtpAddressResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFtpAddressResponse * soap_new_req__ns1__GetFtpAddressResponse(
	struct soap *soap)
{
	_ns1__GetFtpAddressResponse *_p = ::soap_new__ns1__GetFtpAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFtpAddressResponse * soap_new_set__ns1__GetFtpAddressResponse(
	struct soap *soap,
	ns1__SubmitResult *GetFtpAddressResult)
{
	_ns1__GetFtpAddressResponse *_p = ::soap_new__ns1__GetFtpAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetFtpAddressResponse::GetFtpAddressResult = GetFtpAddressResult;
	}
	return _p;
}

inline int soap_write__ns1__GetFtpAddressResponse(struct soap *soap, _ns1__GetFtpAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddressResponse", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddressResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFtpAddressResponse(struct soap *soap, const char *URL, _ns1__GetFtpAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddressResponse", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddressResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFtpAddressResponse(struct soap *soap, const char *URL, _ns1__GetFtpAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddressResponse", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddressResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFtpAddressResponse * SOAP_FMAC4 soap_get__ns1__GetFtpAddressResponse(struct soap*, _ns1__GetFtpAddressResponse *, const char*, const char*);

inline int soap_read__ns1__GetFtpAddressResponse(struct soap *soap, _ns1__GetFtpAddressResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetFtpAddressResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFtpAddressResponse(struct soap *soap, const char *URL, _ns1__GetFtpAddressResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetFtpAddressResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFtpAddressResponse(struct soap *soap, _ns1__GetFtpAddressResponse *p)
{
	if (::soap_read__ns1__GetFtpAddressResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetFtpAddress_DEFINED
#define SOAP_TYPE__ns1__GetFtpAddress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetFtpAddress(struct soap*, const char*, int, const _ns1__GetFtpAddress *, const char*);
SOAP_FMAC3 _ns1__GetFtpAddress * SOAP_FMAC4 soap_in__ns1__GetFtpAddress(struct soap*, const char*, _ns1__GetFtpAddress *, const char*);
SOAP_FMAC1 _ns1__GetFtpAddress * SOAP_FMAC2 soap_instantiate__ns1__GetFtpAddress(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetFtpAddress * soap_new__ns1__GetFtpAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetFtpAddress(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetFtpAddress * soap_new_req__ns1__GetFtpAddress(
	struct soap *soap)
{
	_ns1__GetFtpAddress *_p = ::soap_new__ns1__GetFtpAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetFtpAddress * soap_new_set__ns1__GetFtpAddress(
	struct soap *soap)
{
	_ns1__GetFtpAddress *_p = ::soap_new__ns1__GetFtpAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetFtpAddress(struct soap *soap, _ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddress", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddress ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetFtpAddress(struct soap *soap, const char *URL, _ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddress", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetFtpAddress(struct soap *soap, const char *URL, _ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetFtpAddress", p->soap_type() == SOAP_TYPE__ns1__GetFtpAddress ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetFtpAddress * SOAP_FMAC4 soap_get__ns1__GetFtpAddress(struct soap*, _ns1__GetFtpAddress *, const char*, const char*);

inline int soap_read__ns1__GetFtpAddress(struct soap *soap, _ns1__GetFtpAddress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetFtpAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetFtpAddress(struct soap *soap, const char *URL, _ns1__GetFtpAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetFtpAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetFtpAddress(struct soap *soap, _ns1__GetFtpAddress *p)
{
	if (::soap_read__ns1__GetFtpAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__IscalibrationcontainerResponse_DEFINED
#define SOAP_TYPE__ns1__IscalibrationcontainerResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IscalibrationcontainerResponse(struct soap*, const char*, int, const _ns1__IscalibrationcontainerResponse *, const char*);
SOAP_FMAC3 _ns1__IscalibrationcontainerResponse * SOAP_FMAC4 soap_in__ns1__IscalibrationcontainerResponse(struct soap*, const char*, _ns1__IscalibrationcontainerResponse *, const char*);
SOAP_FMAC1 _ns1__IscalibrationcontainerResponse * SOAP_FMAC2 soap_instantiate__ns1__IscalibrationcontainerResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__IscalibrationcontainerResponse * soap_new__ns1__IscalibrationcontainerResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__IscalibrationcontainerResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__IscalibrationcontainerResponse * soap_new_req__ns1__IscalibrationcontainerResponse(
	struct soap *soap)
{
	_ns1__IscalibrationcontainerResponse *_p = ::soap_new__ns1__IscalibrationcontainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__IscalibrationcontainerResponse * soap_new_set__ns1__IscalibrationcontainerResponse(
	struct soap *soap,
	ns1__SubmitResult *IscalibrationcontainerResult)
{
	_ns1__IscalibrationcontainerResponse *_p = ::soap_new__ns1__IscalibrationcontainerResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__IscalibrationcontainerResponse::IscalibrationcontainerResult = IscalibrationcontainerResult;
	}
	return _p;
}

inline int soap_write__ns1__IscalibrationcontainerResponse(struct soap *soap, _ns1__IscalibrationcontainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IscalibrationcontainerResponse", p->soap_type() == SOAP_TYPE__ns1__IscalibrationcontainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__IscalibrationcontainerResponse(struct soap *soap, const char *URL, _ns1__IscalibrationcontainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IscalibrationcontainerResponse", p->soap_type() == SOAP_TYPE__ns1__IscalibrationcontainerResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__IscalibrationcontainerResponse(struct soap *soap, const char *URL, _ns1__IscalibrationcontainerResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IscalibrationcontainerResponse", p->soap_type() == SOAP_TYPE__ns1__IscalibrationcontainerResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__IscalibrationcontainerResponse * SOAP_FMAC4 soap_get__ns1__IscalibrationcontainerResponse(struct soap*, _ns1__IscalibrationcontainerResponse *, const char*, const char*);

inline int soap_read__ns1__IscalibrationcontainerResponse(struct soap *soap, _ns1__IscalibrationcontainerResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__IscalibrationcontainerResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__IscalibrationcontainerResponse(struct soap *soap, const char *URL, _ns1__IscalibrationcontainerResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__IscalibrationcontainerResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__IscalibrationcontainerResponse(struct soap *soap, _ns1__IscalibrationcontainerResponse *p)
{
	if (::soap_read__ns1__IscalibrationcontainerResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Iscalibrationcontainer_DEFINED
#define SOAP_TYPE__ns1__Iscalibrationcontainer_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Iscalibrationcontainer(struct soap*, const char*, int, const _ns1__Iscalibrationcontainer *, const char*);
SOAP_FMAC3 _ns1__Iscalibrationcontainer * SOAP_FMAC4 soap_in__ns1__Iscalibrationcontainer(struct soap*, const char*, _ns1__Iscalibrationcontainer *, const char*);
SOAP_FMAC1 _ns1__Iscalibrationcontainer * SOAP_FMAC2 soap_instantiate__ns1__Iscalibrationcontainer(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Iscalibrationcontainer * soap_new__ns1__Iscalibrationcontainer(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Iscalibrationcontainer(soap, n, NULL, NULL, NULL);
}

inline _ns1__Iscalibrationcontainer * soap_new_req__ns1__Iscalibrationcontainer(
	struct soap *soap)
{
	_ns1__Iscalibrationcontainer *_p = ::soap_new__ns1__Iscalibrationcontainer(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Iscalibrationcontainer * soap_new_set__ns1__Iscalibrationcontainer(
	struct soap *soap,
	std::string *ContainerName)
{
	_ns1__Iscalibrationcontainer *_p = ::soap_new__ns1__Iscalibrationcontainer(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Iscalibrationcontainer::ContainerName = ContainerName;
	}
	return _p;
}

inline int soap_write__ns1__Iscalibrationcontainer(struct soap *soap, _ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Iscalibrationcontainer", p->soap_type() == SOAP_TYPE__ns1__Iscalibrationcontainer ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, _ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Iscalibrationcontainer", p->soap_type() == SOAP_TYPE__ns1__Iscalibrationcontainer ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, _ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Iscalibrationcontainer", p->soap_type() == SOAP_TYPE__ns1__Iscalibrationcontainer ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Iscalibrationcontainer * SOAP_FMAC4 soap_get__ns1__Iscalibrationcontainer(struct soap*, _ns1__Iscalibrationcontainer *, const char*, const char*);

inline int soap_read__ns1__Iscalibrationcontainer(struct soap *soap, _ns1__Iscalibrationcontainer *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Iscalibrationcontainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, _ns1__Iscalibrationcontainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Iscalibrationcontainer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Iscalibrationcontainer(struct soap *soap, _ns1__Iscalibrationcontainer *p)
{
	if (::soap_read__ns1__Iscalibrationcontainer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTensileTestRuleResponse_DEFINED
#define SOAP_TYPE__ns1__GetTensileTestRuleResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTensileTestRuleResponse(struct soap*, const char*, int, const _ns1__GetTensileTestRuleResponse *, const char*);
SOAP_FMAC3 _ns1__GetTensileTestRuleResponse * SOAP_FMAC4 soap_in__ns1__GetTensileTestRuleResponse(struct soap*, const char*, _ns1__GetTensileTestRuleResponse *, const char*);
SOAP_FMAC1 _ns1__GetTensileTestRuleResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTensileTestRuleResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTensileTestRuleResponse * soap_new__ns1__GetTensileTestRuleResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTensileTestRuleResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTensileTestRuleResponse * soap_new_req__ns1__GetTensileTestRuleResponse(
	struct soap *soap)
{
	_ns1__GetTensileTestRuleResponse *_p = ::soap_new__ns1__GetTensileTestRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTensileTestRuleResponse * soap_new_set__ns1__GetTensileTestRuleResponse(
	struct soap *soap,
	ns1__SubmitResult *GetTensileTestRuleResult)
{
	_ns1__GetTensileTestRuleResponse *_p = ::soap_new__ns1__GetTensileTestRuleResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetTensileTestRuleResponse::GetTensileTestRuleResult = GetTensileTestRuleResult;
	}
	return _p;
}

inline int soap_write__ns1__GetTensileTestRuleResponse(struct soap *soap, _ns1__GetTensileTestRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRuleResponse", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTensileTestRuleResponse(struct soap *soap, const char *URL, _ns1__GetTensileTestRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRuleResponse", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRuleResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTensileTestRuleResponse(struct soap *soap, const char *URL, _ns1__GetTensileTestRuleResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRuleResponse", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRuleResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTensileTestRuleResponse * SOAP_FMAC4 soap_get__ns1__GetTensileTestRuleResponse(struct soap*, _ns1__GetTensileTestRuleResponse *, const char*, const char*);

inline int soap_read__ns1__GetTensileTestRuleResponse(struct soap *soap, _ns1__GetTensileTestRuleResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetTensileTestRuleResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTensileTestRuleResponse(struct soap *soap, const char *URL, _ns1__GetTensileTestRuleResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetTensileTestRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTensileTestRuleResponse(struct soap *soap, _ns1__GetTensileTestRuleResponse *p)
{
	if (::soap_read__ns1__GetTensileTestRuleResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetTensileTestRule_DEFINED
#define SOAP_TYPE__ns1__GetTensileTestRule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTensileTestRule(struct soap*, const char*, int, const _ns1__GetTensileTestRule *, const char*);
SOAP_FMAC3 _ns1__GetTensileTestRule * SOAP_FMAC4 soap_in__ns1__GetTensileTestRule(struct soap*, const char*, _ns1__GetTensileTestRule *, const char*);
SOAP_FMAC1 _ns1__GetTensileTestRule * SOAP_FMAC2 soap_instantiate__ns1__GetTensileTestRule(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTensileTestRule * soap_new__ns1__GetTensileTestRule(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetTensileTestRule(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetTensileTestRule * soap_new_req__ns1__GetTensileTestRule(
	struct soap *soap)
{
	_ns1__GetTensileTestRule *_p = ::soap_new__ns1__GetTensileTestRule(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetTensileTestRule * soap_new_set__ns1__GetTensileTestRule(
	struct soap *soap)
{
	_ns1__GetTensileTestRule *_p = ::soap_new__ns1__GetTensileTestRule(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__GetTensileTestRule(struct soap *soap, _ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRule", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetTensileTestRule(struct soap *soap, const char *URL, _ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRule", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetTensileTestRule(struct soap *soap, const char *URL, _ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetTensileTestRule", p->soap_type() == SOAP_TYPE__ns1__GetTensileTestRule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetTensileTestRule * SOAP_FMAC4 soap_get__ns1__GetTensileTestRule(struct soap*, _ns1__GetTensileTestRule *, const char*, const char*);

inline int soap_read__ns1__GetTensileTestRule(struct soap *soap, _ns1__GetTensileTestRule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetTensileTestRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetTensileTestRule(struct soap *soap, const char *URL, _ns1__GetTensileTestRule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetTensileTestRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetTensileTestRule(struct soap *soap, _ns1__GetTensileTestRule *p)
{
	if (::soap_read__ns1__GetTensileTestRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetContainerDataInfoMESResponse_DEFINED
#define SOAP_TYPE__ns1__GetContainerDataInfoMESResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetContainerDataInfoMESResponse(struct soap*, const char*, int, const _ns1__GetContainerDataInfoMESResponse *, const char*);
SOAP_FMAC3 _ns1__GetContainerDataInfoMESResponse * SOAP_FMAC4 soap_in__ns1__GetContainerDataInfoMESResponse(struct soap*, const char*, _ns1__GetContainerDataInfoMESResponse *, const char*);
SOAP_FMAC1 _ns1__GetContainerDataInfoMESResponse * SOAP_FMAC2 soap_instantiate__ns1__GetContainerDataInfoMESResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetContainerDataInfoMESResponse * soap_new__ns1__GetContainerDataInfoMESResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetContainerDataInfoMESResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetContainerDataInfoMESResponse * soap_new_req__ns1__GetContainerDataInfoMESResponse(
	struct soap *soap)
{
	_ns1__GetContainerDataInfoMESResponse *_p = ::soap_new__ns1__GetContainerDataInfoMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetContainerDataInfoMESResponse * soap_new_set__ns1__GetContainerDataInfoMESResponse(
	struct soap *soap,
	ns1__ArrayOfSubmitResult *GetContainerDataInfoMESResult)
{
	_ns1__GetContainerDataInfoMESResponse *_p = ::soap_new__ns1__GetContainerDataInfoMESResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetContainerDataInfoMESResponse::GetContainerDataInfoMESResult = GetContainerDataInfoMESResult;
	}
	return _p;
}

inline int soap_write__ns1__GetContainerDataInfoMESResponse(struct soap *soap, _ns1__GetContainerDataInfoMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMESResponse", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetContainerDataInfoMESResponse(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMESResponse", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMESResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetContainerDataInfoMESResponse(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMESResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMESResponse", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMESResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetContainerDataInfoMESResponse * SOAP_FMAC4 soap_get__ns1__GetContainerDataInfoMESResponse(struct soap*, _ns1__GetContainerDataInfoMESResponse *, const char*, const char*);

inline int soap_read__ns1__GetContainerDataInfoMESResponse(struct soap *soap, _ns1__GetContainerDataInfoMESResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetContainerDataInfoMESResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetContainerDataInfoMESResponse(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMESResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetContainerDataInfoMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetContainerDataInfoMESResponse(struct soap *soap, _ns1__GetContainerDataInfoMESResponse *p)
{
	if (::soap_read__ns1__GetContainerDataInfoMESResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetContainerDataInfoMES_DEFINED
#define SOAP_TYPE__ns1__GetContainerDataInfoMES_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetContainerDataInfoMES(struct soap*, const char*, int, const _ns1__GetContainerDataInfoMES *, const char*);
SOAP_FMAC3 _ns1__GetContainerDataInfoMES * SOAP_FMAC4 soap_in__ns1__GetContainerDataInfoMES(struct soap*, const char*, _ns1__GetContainerDataInfoMES *, const char*);
SOAP_FMAC1 _ns1__GetContainerDataInfoMES * SOAP_FMAC2 soap_instantiate__ns1__GetContainerDataInfoMES(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetContainerDataInfoMES * soap_new__ns1__GetContainerDataInfoMES(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetContainerDataInfoMES(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetContainerDataInfoMES * soap_new_req__ns1__GetContainerDataInfoMES(
	struct soap *soap)
{
	_ns1__GetContainerDataInfoMES *_p = ::soap_new__ns1__GetContainerDataInfoMES(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetContainerDataInfoMES * soap_new_set__ns1__GetContainerDataInfoMES(
	struct soap *soap,
	std::string *ContainerName)
{
	_ns1__GetContainerDataInfoMES *_p = ::soap_new__ns1__GetContainerDataInfoMES(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetContainerDataInfoMES::ContainerName = ContainerName;
	}
	return _p;
}

inline int soap_write__ns1__GetContainerDataInfoMES(struct soap *soap, _ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMES", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMES ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMES", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMES ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetContainerDataInfoMES", p->soap_type() == SOAP_TYPE__ns1__GetContainerDataInfoMES ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetContainerDataInfoMES * SOAP_FMAC4 soap_get__ns1__GetContainerDataInfoMES(struct soap*, _ns1__GetContainerDataInfoMES *, const char*, const char*);

inline int soap_read__ns1__GetContainerDataInfoMES(struct soap *soap, _ns1__GetContainerDataInfoMES *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetContainerDataInfoMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, _ns1__GetContainerDataInfoMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetContainerDataInfoMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetContainerDataInfoMES(struct soap *soap, _ns1__GetContainerDataInfoMES *p)
{
	if (::soap_read__ns1__GetContainerDataInfoMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadTensileInfoToMesResponse_DEFINED
#define SOAP_TYPE__ns1__UploadTensileInfoToMesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadTensileInfoToMesResponse(struct soap*, const char*, int, const _ns1__UploadTensileInfoToMesResponse *, const char*);
SOAP_FMAC3 _ns1__UploadTensileInfoToMesResponse * SOAP_FMAC4 soap_in__ns1__UploadTensileInfoToMesResponse(struct soap*, const char*, _ns1__UploadTensileInfoToMesResponse *, const char*);
SOAP_FMAC1 _ns1__UploadTensileInfoToMesResponse * SOAP_FMAC2 soap_instantiate__ns1__UploadTensileInfoToMesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadTensileInfoToMesResponse * soap_new__ns1__UploadTensileInfoToMesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadTensileInfoToMesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadTensileInfoToMesResponse * soap_new_req__ns1__UploadTensileInfoToMesResponse(
	struct soap *soap)
{
	_ns1__UploadTensileInfoToMesResponse *_p = ::soap_new__ns1__UploadTensileInfoToMesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadTensileInfoToMesResponse * soap_new_set__ns1__UploadTensileInfoToMesResponse(
	struct soap *soap,
	ns1__SubmitResult *UploadTensileInfoToMesResult)
{
	_ns1__UploadTensileInfoToMesResponse *_p = ::soap_new__ns1__UploadTensileInfoToMesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadTensileInfoToMesResponse::UploadTensileInfoToMesResult = UploadTensileInfoToMesResult;
	}
	return _p;
}

inline int soap_write__ns1__UploadTensileInfoToMesResponse(struct soap *soap, _ns1__UploadTensileInfoToMesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMesResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadTensileInfoToMesResponse(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMesResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadTensileInfoToMesResponse(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMesResponse", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadTensileInfoToMesResponse * SOAP_FMAC4 soap_get__ns1__UploadTensileInfoToMesResponse(struct soap*, _ns1__UploadTensileInfoToMesResponse *, const char*, const char*);

inline int soap_read__ns1__UploadTensileInfoToMesResponse(struct soap *soap, _ns1__UploadTensileInfoToMesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__UploadTensileInfoToMesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadTensileInfoToMesResponse(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__UploadTensileInfoToMesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadTensileInfoToMesResponse(struct soap *soap, _ns1__UploadTensileInfoToMesResponse *p)
{
	if (::soap_read__ns1__UploadTensileInfoToMesResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__UploadTensileInfoToMes_DEFINED
#define SOAP_TYPE__ns1__UploadTensileInfoToMes_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadTensileInfoToMes(struct soap*, const char*, int, const _ns1__UploadTensileInfoToMes *, const char*);
SOAP_FMAC3 _ns1__UploadTensileInfoToMes * SOAP_FMAC4 soap_in__ns1__UploadTensileInfoToMes(struct soap*, const char*, _ns1__UploadTensileInfoToMes *, const char*);
SOAP_FMAC1 _ns1__UploadTensileInfoToMes * SOAP_FMAC2 soap_instantiate__ns1__UploadTensileInfoToMes(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__UploadTensileInfoToMes * soap_new__ns1__UploadTensileInfoToMes(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__UploadTensileInfoToMes(soap, n, NULL, NULL, NULL);
}

inline _ns1__UploadTensileInfoToMes * soap_new_req__ns1__UploadTensileInfoToMes(
	struct soap *soap)
{
	_ns1__UploadTensileInfoToMes *_p = ::soap_new__ns1__UploadTensileInfoToMes(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__UploadTensileInfoToMes * soap_new_set__ns1__UploadTensileInfoToMes(
	struct soap *soap,
	std::string *LotSn,
	std::string *TestData)
{
	_ns1__UploadTensileInfoToMes *_p = ::soap_new__ns1__UploadTensileInfoToMes(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__UploadTensileInfoToMes::LotSn = LotSn;
		_p->_ns1__UploadTensileInfoToMes::TestData = TestData;
	}
	return _p;
}

inline int soap_write__ns1__UploadTensileInfoToMes(struct soap *soap, _ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMes", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMes ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMes", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMes ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UploadTensileInfoToMes", p->soap_type() == SOAP_TYPE__ns1__UploadTensileInfoToMes ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__UploadTensileInfoToMes * SOAP_FMAC4 soap_get__ns1__UploadTensileInfoToMes(struct soap*, _ns1__UploadTensileInfoToMes *, const char*, const char*);

inline int soap_read__ns1__UploadTensileInfoToMes(struct soap *soap, _ns1__UploadTensileInfoToMes *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__UploadTensileInfoToMes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, _ns1__UploadTensileInfoToMes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__UploadTensileInfoToMes(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__UploadTensileInfoToMes(struct soap *soap, _ns1__UploadTensileInfoToMes *p)
{
	if (::soap_read__ns1__UploadTensileInfoToMes(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SafetyInfoMoveStdResponse_DEFINED
#define SOAP_TYPE__ns1__SafetyInfoMoveStdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SafetyInfoMoveStdResponse(struct soap*, const char*, int, const _ns1__SafetyInfoMoveStdResponse *, const char*);
SOAP_FMAC3 _ns1__SafetyInfoMoveStdResponse * SOAP_FMAC4 soap_in__ns1__SafetyInfoMoveStdResponse(struct soap*, const char*, _ns1__SafetyInfoMoveStdResponse *, const char*);
SOAP_FMAC1 _ns1__SafetyInfoMoveStdResponse * SOAP_FMAC2 soap_instantiate__ns1__SafetyInfoMoveStdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SafetyInfoMoveStdResponse * soap_new__ns1__SafetyInfoMoveStdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SafetyInfoMoveStdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SafetyInfoMoveStdResponse * soap_new_req__ns1__SafetyInfoMoveStdResponse(
	struct soap *soap)
{
	_ns1__SafetyInfoMoveStdResponse *_p = ::soap_new__ns1__SafetyInfoMoveStdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__SafetyInfoMoveStdResponse * soap_new_set__ns1__SafetyInfoMoveStdResponse(
	struct soap *soap,
	ns1__SubmitResult *SafetyInfoMoveStdResult)
{
	_ns1__SafetyInfoMoveStdResponse *_p = ::soap_new__ns1__SafetyInfoMoveStdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SafetyInfoMoveStdResponse::SafetyInfoMoveStdResult = SafetyInfoMoveStdResult;
	}
	return _p;
}

inline int soap_write__ns1__SafetyInfoMoveStdResponse(struct soap *soap, _ns1__SafetyInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SafetyInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SafetyInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SafetyInfoMoveStdResponse * SOAP_FMAC4 soap_get__ns1__SafetyInfoMoveStdResponse(struct soap*, _ns1__SafetyInfoMoveStdResponse *, const char*, const char*);

inline int soap_read__ns1__SafetyInfoMoveStdResponse(struct soap *soap, _ns1__SafetyInfoMoveStdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SafetyInfoMoveStdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SafetyInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SafetyInfoMoveStdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SafetyInfoMoveStdResponse(struct soap *soap, _ns1__SafetyInfoMoveStdResponse *p)
{
	if (::soap_read__ns1__SafetyInfoMoveStdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SafetyInfoMoveStd_DEFINED
#define SOAP_TYPE__ns1__SafetyInfoMoveStd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SafetyInfoMoveStd(struct soap*, const char*, int, const _ns1__SafetyInfoMoveStd *, const char*);
SOAP_FMAC3 _ns1__SafetyInfoMoveStd * SOAP_FMAC4 soap_in__ns1__SafetyInfoMoveStd(struct soap*, const char*, _ns1__SafetyInfoMoveStd *, const char*);
SOAP_FMAC1 _ns1__SafetyInfoMoveStd * SOAP_FMAC2 soap_instantiate__ns1__SafetyInfoMoveStd(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SafetyInfoMoveStd * soap_new__ns1__SafetyInfoMoveStd(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SafetyInfoMoveStd(soap, n, NULL, NULL, NULL);
}

inline _ns1__SafetyInfoMoveStd * soap_new_req__ns1__SafetyInfoMoveStd(
	struct soap *soap,
	time_t TestDate)
{
	_ns1__SafetyInfoMoveStd *_p = ::soap_new__ns1__SafetyInfoMoveStd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SafetyInfoMoveStd::TestDate = TestDate;
	}
	return _p;
}

inline _ns1__SafetyInfoMoveStd * soap_new_set__ns1__SafetyInfoMoveStd(
	struct soap *soap,
	time_t TestDate,
	std::string *LotSN,
	std::string *Current,
	std::string *InsulationResistance,
	std::string *GroundResistance,
	std::string *TestResult,
	std::string *IPAddress)
{
	_ns1__SafetyInfoMoveStd *_p = ::soap_new__ns1__SafetyInfoMoveStd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SafetyInfoMoveStd::TestDate = TestDate;
		_p->_ns1__SafetyInfoMoveStd::LotSN = LotSN;
		_p->_ns1__SafetyInfoMoveStd::Current = Current;
		_p->_ns1__SafetyInfoMoveStd::InsulationResistance = InsulationResistance;
		_p->_ns1__SafetyInfoMoveStd::GroundResistance = GroundResistance;
		_p->_ns1__SafetyInfoMoveStd::TestResult = TestResult;
		_p->_ns1__SafetyInfoMoveStd::IPAddress = IPAddress;
	}
	return _p;
}

inline int soap_write__ns1__SafetyInfoMoveStd(struct soap *soap, _ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SafetyInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__SafetyInfoMoveStd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SafetyInfoMoveStd * SOAP_FMAC4 soap_get__ns1__SafetyInfoMoveStd(struct soap*, _ns1__SafetyInfoMoveStd *, const char*, const char*);

inline int soap_read__ns1__SafetyInfoMoveStd(struct soap *soap, _ns1__SafetyInfoMoveStd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__SafetyInfoMoveStd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, _ns1__SafetyInfoMoveStd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__SafetyInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__SafetyInfoMoveStd(struct soap *soap, _ns1__SafetyInfoMoveStd *p)
{
	if (::soap_read__ns1__SafetyInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ELInfoMoveStdResponse_DEFINED
#define SOAP_TYPE__ns1__ELInfoMoveStdResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ELInfoMoveStdResponse(struct soap*, const char*, int, const _ns1__ELInfoMoveStdResponse *, const char*);
SOAP_FMAC3 _ns1__ELInfoMoveStdResponse * SOAP_FMAC4 soap_in__ns1__ELInfoMoveStdResponse(struct soap*, const char*, _ns1__ELInfoMoveStdResponse *, const char*);
SOAP_FMAC1 _ns1__ELInfoMoveStdResponse * SOAP_FMAC2 soap_instantiate__ns1__ELInfoMoveStdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ELInfoMoveStdResponse * soap_new__ns1__ELInfoMoveStdResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ELInfoMoveStdResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ELInfoMoveStdResponse * soap_new_req__ns1__ELInfoMoveStdResponse(
	struct soap *soap)
{
	_ns1__ELInfoMoveStdResponse *_p = ::soap_new__ns1__ELInfoMoveStdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ELInfoMoveStdResponse * soap_new_set__ns1__ELInfoMoveStdResponse(
	struct soap *soap,
	ns1__SubmitResult *ELInfoMoveStdResult)
{
	_ns1__ELInfoMoveStdResponse *_p = ::soap_new__ns1__ELInfoMoveStdResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ELInfoMoveStdResponse::ELInfoMoveStdResult = ELInfoMoveStdResult;
	}
	return _p;
}

inline int soap_write__ns1__ELInfoMoveStdResponse(struct soap *soap, _ns1__ELInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ELInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__ELInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ELInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__ELInfoMoveStdResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStdResponse", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStdResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ELInfoMoveStdResponse * SOAP_FMAC4 soap_get__ns1__ELInfoMoveStdResponse(struct soap*, _ns1__ELInfoMoveStdResponse *, const char*, const char*);

inline int soap_read__ns1__ELInfoMoveStdResponse(struct soap *soap, _ns1__ELInfoMoveStdResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ELInfoMoveStdResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ELInfoMoveStdResponse(struct soap *soap, const char *URL, _ns1__ELInfoMoveStdResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ELInfoMoveStdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ELInfoMoveStdResponse(struct soap *soap, _ns1__ELInfoMoveStdResponse *p)
{
	if (::soap_read__ns1__ELInfoMoveStdResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ELInfoMoveStd_DEFINED
#define SOAP_TYPE__ns1__ELInfoMoveStd_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ELInfoMoveStd(struct soap*, const char*, int, const _ns1__ELInfoMoveStd *, const char*);
SOAP_FMAC3 _ns1__ELInfoMoveStd * SOAP_FMAC4 soap_in__ns1__ELInfoMoveStd(struct soap*, const char*, _ns1__ELInfoMoveStd *, const char*);
SOAP_FMAC1 _ns1__ELInfoMoveStd * SOAP_FMAC2 soap_instantiate__ns1__ELInfoMoveStd(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ELInfoMoveStd * soap_new__ns1__ELInfoMoveStd(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ELInfoMoveStd(soap, n, NULL, NULL, NULL);
}

inline _ns1__ELInfoMoveStd * soap_new_req__ns1__ELInfoMoveStd(
	struct soap *soap)
{
	_ns1__ELInfoMoveStd *_p = ::soap_new__ns1__ELInfoMoveStd(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ELInfoMoveStd * soap_new_set__ns1__ELInfoMoveStd(
	struct soap *soap,
	std::string *LotSN,
	std::string *TestData,
	std::string *lstDefectInfo)
{
	_ns1__ELInfoMoveStd *_p = ::soap_new__ns1__ELInfoMoveStd(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ELInfoMoveStd::LotSN = LotSN;
		_p->_ns1__ELInfoMoveStd::TestData = TestData;
		_p->_ns1__ELInfoMoveStd::lstDefectInfo = lstDefectInfo;
	}
	return _p;
}

inline int soap_write__ns1__ELInfoMoveStd(struct soap *soap, _ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStd ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ELInfoMoveStd(struct soap *soap, const char *URL, _ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStd ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ELInfoMoveStd(struct soap *soap, const char *URL, _ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELInfoMoveStd", p->soap_type() == SOAP_TYPE__ns1__ELInfoMoveStd ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ELInfoMoveStd * SOAP_FMAC4 soap_get__ns1__ELInfoMoveStd(struct soap*, _ns1__ELInfoMoveStd *, const char*, const char*);

inline int soap_read__ns1__ELInfoMoveStd(struct soap *soap, _ns1__ELInfoMoveStd *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ELInfoMoveStd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ELInfoMoveStd(struct soap *soap, const char *URL, _ns1__ELInfoMoveStd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ELInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ELInfoMoveStd(struct soap *soap, _ns1__ELInfoMoveStd *p)
{
	if (::soap_read__ns1__ELInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ELPictureAddressResponse_DEFINED
#define SOAP_TYPE__ns1__ELPictureAddressResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ELPictureAddressResponse(struct soap*, const char*, int, const _ns1__ELPictureAddressResponse *, const char*);
SOAP_FMAC3 _ns1__ELPictureAddressResponse * SOAP_FMAC4 soap_in__ns1__ELPictureAddressResponse(struct soap*, const char*, _ns1__ELPictureAddressResponse *, const char*);
SOAP_FMAC1 _ns1__ELPictureAddressResponse * SOAP_FMAC2 soap_instantiate__ns1__ELPictureAddressResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ELPictureAddressResponse * soap_new__ns1__ELPictureAddressResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ELPictureAddressResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__ELPictureAddressResponse * soap_new_req__ns1__ELPictureAddressResponse(
	struct soap *soap)
{
	_ns1__ELPictureAddressResponse *_p = ::soap_new__ns1__ELPictureAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ELPictureAddressResponse * soap_new_set__ns1__ELPictureAddressResponse(
	struct soap *soap,
	std::string *ELPictureAddressResult)
{
	_ns1__ELPictureAddressResponse *_p = ::soap_new__ns1__ELPictureAddressResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ELPictureAddressResponse::ELPictureAddressResult = ELPictureAddressResult;
	}
	return _p;
}

inline int soap_write__ns1__ELPictureAddressResponse(struct soap *soap, _ns1__ELPictureAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddressResponse", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddressResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ELPictureAddressResponse(struct soap *soap, const char *URL, _ns1__ELPictureAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddressResponse", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddressResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ELPictureAddressResponse(struct soap *soap, const char *URL, _ns1__ELPictureAddressResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddressResponse", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddressResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ELPictureAddressResponse * SOAP_FMAC4 soap_get__ns1__ELPictureAddressResponse(struct soap*, _ns1__ELPictureAddressResponse *, const char*, const char*);

inline int soap_read__ns1__ELPictureAddressResponse(struct soap *soap, _ns1__ELPictureAddressResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ELPictureAddressResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ELPictureAddressResponse(struct soap *soap, const char *URL, _ns1__ELPictureAddressResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ELPictureAddressResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ELPictureAddressResponse(struct soap *soap, _ns1__ELPictureAddressResponse *p)
{
	if (::soap_read__ns1__ELPictureAddressResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__ELPictureAddress_DEFINED
#define SOAP_TYPE__ns1__ELPictureAddress_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ELPictureAddress(struct soap*, const char*, int, const _ns1__ELPictureAddress *, const char*);
SOAP_FMAC3 _ns1__ELPictureAddress * SOAP_FMAC4 soap_in__ns1__ELPictureAddress(struct soap*, const char*, _ns1__ELPictureAddress *, const char*);
SOAP_FMAC1 _ns1__ELPictureAddress * SOAP_FMAC2 soap_instantiate__ns1__ELPictureAddress(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ELPictureAddress * soap_new__ns1__ELPictureAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__ELPictureAddress(soap, n, NULL, NULL, NULL);
}

inline _ns1__ELPictureAddress * soap_new_req__ns1__ELPictureAddress(
	struct soap *soap)
{
	_ns1__ELPictureAddress *_p = ::soap_new__ns1__ELPictureAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__ELPictureAddress * soap_new_set__ns1__ELPictureAddress(
	struct soap *soap,
	std::string *LotSn)
{
	_ns1__ELPictureAddress *_p = ::soap_new__ns1__ELPictureAddress(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__ELPictureAddress::LotSn = LotSn;
	}
	return _p;
}

inline int soap_write__ns1__ELPictureAddress(struct soap *soap, _ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddress", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddress ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__ELPictureAddress(struct soap *soap, const char *URL, _ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddress", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddress ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__ELPictureAddress(struct soap *soap, const char *URL, _ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ELPictureAddress", p->soap_type() == SOAP_TYPE__ns1__ELPictureAddress ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__ELPictureAddress * SOAP_FMAC4 soap_get__ns1__ELPictureAddress(struct soap*, _ns1__ELPictureAddress *, const char*, const char*);

inline int soap_read__ns1__ELPictureAddress(struct soap *soap, _ns1__ELPictureAddress *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__ELPictureAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__ELPictureAddress(struct soap *soap, const char *URL, _ns1__ELPictureAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__ELPictureAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__ELPictureAddress(struct soap *soap, _ns1__ELPictureAddress *p)
{
	if (::soap_read__ns1__ELPictureAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpireResponse_DEFINED
#define SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpireResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap*, const char*, int, const _ns1__jKoIVMoveStd_USCORESpireResponse *, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpireResponse * SOAP_FMAC4 soap_in__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap*, const char*, _ns1__jKoIVMoveStd_USCORESpireResponse *, const char*);
SOAP_FMAC1 _ns1__jKoIVMoveStd_USCORESpireResponse * SOAP_FMAC2 soap_instantiate__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__jKoIVMoveStd_USCORESpireResponse * soap_new__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__jKoIVMoveStd_USCORESpireResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__jKoIVMoveStd_USCORESpireResponse * soap_new_req__ns1__jKoIVMoveStd_USCORESpireResponse(
	struct soap *soap)
{
	_ns1__jKoIVMoveStd_USCORESpireResponse *_p = ::soap_new__ns1__jKoIVMoveStd_USCORESpireResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__jKoIVMoveStd_USCORESpireResponse * soap_new_set__ns1__jKoIVMoveStd_USCORESpireResponse(
	struct soap *soap,
	ns1__SubmitResult *jKoIVMoveStd_USCORESpireResult)
{
	_ns1__jKoIVMoveStd_USCORESpireResponse *_p = ::soap_new__ns1__jKoIVMoveStd_USCORESpireResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__jKoIVMoveStd_USCORESpireResponse::jKoIVMoveStd_USCORESpireResult = jKoIVMoveStd_USCORESpireResult;
	}
	return _p;
}

inline int soap_write__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpireResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_SpireResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpireResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpireResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_SpireResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpireResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpireResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_SpireResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpireResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpireResponse * SOAP_FMAC4 soap_get__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap*, _ns1__jKoIVMoveStd_USCORESpireResponse *, const char*, const char*);

inline int soap_read__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpireResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__jKoIVMoveStd_USCORESpireResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpireResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__jKoIVMoveStd_USCORESpireResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__jKoIVMoveStd_USCORESpireResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpireResponse *p)
{
	if (::soap_read__ns1__jKoIVMoveStd_USCORESpireResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpire_DEFINED
#define SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpire_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char*, int, const _ns1__jKoIVMoveStd_USCORESpire *, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC4 soap_in__ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char*, _ns1__jKoIVMoveStd_USCORESpire *, const char*);
SOAP_FMAC1 _ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC2 soap_instantiate__ns1__jKoIVMoveStd_USCORESpire(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__jKoIVMoveStd_USCORESpire * soap_new__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__jKoIVMoveStd_USCORESpire(soap, n, NULL, NULL, NULL);
}

inline _ns1__jKoIVMoveStd_USCORESpire * soap_new_req__ns1__jKoIVMoveStd_USCORESpire(
	struct soap *soap)
{
	_ns1__jKoIVMoveStd_USCORESpire *_p = ::soap_new__ns1__jKoIVMoveStd_USCORESpire(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__jKoIVMoveStd_USCORESpire * soap_new_set__ns1__jKoIVMoveStd_USCORESpire(
	struct soap *soap,
	std::string *LotSN,
	std::string *IVDataCollect)
{
	_ns1__jKoIVMoveStd_USCORESpire *_p = ::soap_new__ns1__jKoIVMoveStd_USCORESpire(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__jKoIVMoveStd_USCORESpire::LotSN = LotSN;
		_p->_ns1__jKoIVMoveStd_USCORESpire::IVDataCollect = IVDataCollect;
	}
	return _p;
}

inline int soap_write__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Spire", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpire ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Spire", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpire ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Spire", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCORESpire ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC4 soap_get__ns1__jKoIVMoveStd_USCORESpire(struct soap*, _ns1__jKoIVMoveStd_USCORESpire *, const char*, const char*);

inline int soap_read__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__jKoIVMoveStd_USCORESpire(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__jKoIVMoveStd_USCORESpire(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, _ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (::soap_read__ns1__jKoIVMoveStd_USCORESpire(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasanResponse_DEFINED
#define SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasanResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap*, const char*, int, const _ns1__jKoIVMoveStd_USCOREPasanResponse *, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasanResponse * SOAP_FMAC4 soap_in__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap*, const char*, _ns1__jKoIVMoveStd_USCOREPasanResponse *, const char*);
SOAP_FMAC1 _ns1__jKoIVMoveStd_USCOREPasanResponse * SOAP_FMAC2 soap_instantiate__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__jKoIVMoveStd_USCOREPasanResponse * soap_new__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__jKoIVMoveStd_USCOREPasanResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__jKoIVMoveStd_USCOREPasanResponse * soap_new_req__ns1__jKoIVMoveStd_USCOREPasanResponse(
	struct soap *soap)
{
	_ns1__jKoIVMoveStd_USCOREPasanResponse *_p = ::soap_new__ns1__jKoIVMoveStd_USCOREPasanResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__jKoIVMoveStd_USCOREPasanResponse * soap_new_set__ns1__jKoIVMoveStd_USCOREPasanResponse(
	struct soap *soap,
	ns1__SubmitResult *jKoIVMoveStd_USCOREPasanResult)
{
	_ns1__jKoIVMoveStd_USCOREPasanResponse *_p = ::soap_new__ns1__jKoIVMoveStd_USCOREPasanResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__jKoIVMoveStd_USCOREPasanResponse::jKoIVMoveStd_USCOREPasanResult = jKoIVMoveStd_USCOREPasanResult;
	}
	return _p;
}

inline int soap_write__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_PasanResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasanResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_PasanResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasanResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasanResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_PasanResponse", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasanResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasanResponse * SOAP_FMAC4 soap_get__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap*, _ns1__jKoIVMoveStd_USCOREPasanResponse *, const char*, const char*);

inline int soap_read__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasanResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__jKoIVMoveStd_USCOREPasanResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasanResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__jKoIVMoveStd_USCOREPasanResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__jKoIVMoveStd_USCOREPasanResponse(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasanResponse *p)
{
	if (::soap_read__ns1__jKoIVMoveStd_USCOREPasanResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasan_DEFINED
#define SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasan_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char*, int, const _ns1__jKoIVMoveStd_USCOREPasan *, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC4 soap_in__ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char*, _ns1__jKoIVMoveStd_USCOREPasan *, const char*);
SOAP_FMAC1 _ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC2 soap_instantiate__ns1__jKoIVMoveStd_USCOREPasan(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__jKoIVMoveStd_USCOREPasan * soap_new__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__jKoIVMoveStd_USCOREPasan(soap, n, NULL, NULL, NULL);
}

inline _ns1__jKoIVMoveStd_USCOREPasan * soap_new_req__ns1__jKoIVMoveStd_USCOREPasan(
	struct soap *soap)
{
	_ns1__jKoIVMoveStd_USCOREPasan *_p = ::soap_new__ns1__jKoIVMoveStd_USCOREPasan(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__jKoIVMoveStd_USCOREPasan * soap_new_set__ns1__jKoIVMoveStd_USCOREPasan(
	struct soap *soap,
	std::string *LotSN,
	std::string *IVDataCollect)
{
	_ns1__jKoIVMoveStd_USCOREPasan *_p = ::soap_new__ns1__jKoIVMoveStd_USCOREPasan(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__jKoIVMoveStd_USCOREPasan::LotSN = LotSN;
		_p->_ns1__jKoIVMoveStd_USCOREPasan::IVDataCollect = IVDataCollect;
	}
	return _p;
}

inline int soap_write__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Pasan", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasan ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Pasan", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasan ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:jKoIVMoveStd_Pasan", p->soap_type() == SOAP_TYPE__ns1__jKoIVMoveStd_USCOREPasan ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC4 soap_get__ns1__jKoIVMoveStd_USCOREPasan(struct soap*, _ns1__jKoIVMoveStd_USCOREPasan *, const char*, const char*);

inline int soap_read__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__jKoIVMoveStd_USCOREPasan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, _ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__jKoIVMoveStd_USCOREPasan(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, _ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (::soap_read__ns1__jKoIVMoveStd_USCOREPasan(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__IV_USCOREDataCollectionResponse_DEFINED
#define SOAP_TYPE__ns1__IV_USCOREDataCollectionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IV_USCOREDataCollectionResponse(struct soap*, const char*, int, const _ns1__IV_USCOREDataCollectionResponse *, const char*);
SOAP_FMAC3 _ns1__IV_USCOREDataCollectionResponse * SOAP_FMAC4 soap_in__ns1__IV_USCOREDataCollectionResponse(struct soap*, const char*, _ns1__IV_USCOREDataCollectionResponse *, const char*);
SOAP_FMAC1 _ns1__IV_USCOREDataCollectionResponse * SOAP_FMAC2 soap_instantiate__ns1__IV_USCOREDataCollectionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__IV_USCOREDataCollectionResponse * soap_new__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__IV_USCOREDataCollectionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__IV_USCOREDataCollectionResponse * soap_new_req__ns1__IV_USCOREDataCollectionResponse(
	struct soap *soap)
{
	_ns1__IV_USCOREDataCollectionResponse *_p = ::soap_new__ns1__IV_USCOREDataCollectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__IV_USCOREDataCollectionResponse * soap_new_set__ns1__IV_USCOREDataCollectionResponse(
	struct soap *soap,
	ns1__SubmitResult *IV_USCOREDataCollectionResult)
{
	_ns1__IV_USCOREDataCollectionResponse *_p = ::soap_new__ns1__IV_USCOREDataCollectionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__IV_USCOREDataCollectionResponse::IV_USCOREDataCollectionResult = IV_USCOREDataCollectionResult;
	}
	return _p;
}

inline int soap_write__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, _ns1__IV_USCOREDataCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollectionResponse", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollectionResponse", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollectionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollectionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollectionResponse", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollectionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__IV_USCOREDataCollectionResponse * SOAP_FMAC4 soap_get__ns1__IV_USCOREDataCollectionResponse(struct soap*, _ns1__IV_USCOREDataCollectionResponse *, const char*, const char*);

inline int soap_read__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, _ns1__IV_USCOREDataCollectionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__IV_USCOREDataCollectionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollectionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__IV_USCOREDataCollectionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__IV_USCOREDataCollectionResponse(struct soap *soap, _ns1__IV_USCOREDataCollectionResponse *p)
{
	if (::soap_read__ns1__IV_USCOREDataCollectionResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__IV_USCOREDataCollection_DEFINED
#define SOAP_TYPE__ns1__IV_USCOREDataCollection_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IV_USCOREDataCollection(struct soap*, const char*, int, const _ns1__IV_USCOREDataCollection *, const char*);
SOAP_FMAC3 _ns1__IV_USCOREDataCollection * SOAP_FMAC4 soap_in__ns1__IV_USCOREDataCollection(struct soap*, const char*, _ns1__IV_USCOREDataCollection *, const char*);
SOAP_FMAC1 _ns1__IV_USCOREDataCollection * SOAP_FMAC2 soap_instantiate__ns1__IV_USCOREDataCollection(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__IV_USCOREDataCollection * soap_new__ns1__IV_USCOREDataCollection(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__IV_USCOREDataCollection(soap, n, NULL, NULL, NULL);
}

inline _ns1__IV_USCOREDataCollection * soap_new_req__ns1__IV_USCOREDataCollection(
	struct soap *soap)
{
	_ns1__IV_USCOREDataCollection *_p = ::soap_new__ns1__IV_USCOREDataCollection(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__IV_USCOREDataCollection * soap_new_set__ns1__IV_USCOREDataCollection(
	struct soap *soap,
	std::string *TestData,
	std::string *LotSN)
{
	_ns1__IV_USCOREDataCollection *_p = ::soap_new__ns1__IV_USCOREDataCollection(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__IV_USCOREDataCollection::TestData = TestData;
		_p->_ns1__IV_USCOREDataCollection::LotSN = LotSN;
	}
	return _p;
}

inline int soap_write__ns1__IV_USCOREDataCollection(struct soap *soap, _ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollection", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollection ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollection", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollection ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IV_DataCollection", p->soap_type() == SOAP_TYPE__ns1__IV_USCOREDataCollection ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__IV_USCOREDataCollection * SOAP_FMAC4 soap_get__ns1__IV_USCOREDataCollection(struct soap*, _ns1__IV_USCOREDataCollection *, const char*, const char*);

inline int soap_read__ns1__IV_USCOREDataCollection(struct soap *soap, _ns1__IV_USCOREDataCollection *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__IV_USCOREDataCollection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, _ns1__IV_USCOREDataCollection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__IV_USCOREDataCollection(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__IV_USCOREDataCollection(struct soap *soap, _ns1__IV_USCOREDataCollection *p)
{
	if (::soap_read__ns1__IV_USCOREDataCollection(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCurrentSpecBySnResponse_DEFINED
#define SOAP_TYPE__ns1__GetCurrentSpecBySnResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCurrentSpecBySnResponse(struct soap*, const char*, int, const _ns1__GetCurrentSpecBySnResponse *, const char*);
SOAP_FMAC3 _ns1__GetCurrentSpecBySnResponse * SOAP_FMAC4 soap_in__ns1__GetCurrentSpecBySnResponse(struct soap*, const char*, _ns1__GetCurrentSpecBySnResponse *, const char*);
SOAP_FMAC1 _ns1__GetCurrentSpecBySnResponse * SOAP_FMAC2 soap_instantiate__ns1__GetCurrentSpecBySnResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCurrentSpecBySnResponse * soap_new__ns1__GetCurrentSpecBySnResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCurrentSpecBySnResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCurrentSpecBySnResponse * soap_new_req__ns1__GetCurrentSpecBySnResponse(
	struct soap *soap)
{
	_ns1__GetCurrentSpecBySnResponse *_p = ::soap_new__ns1__GetCurrentSpecBySnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCurrentSpecBySnResponse * soap_new_set__ns1__GetCurrentSpecBySnResponse(
	struct soap *soap,
	ns1__SubmitResult *GetCurrentSpecBySnResult)
{
	_ns1__GetCurrentSpecBySnResponse *_p = ::soap_new__ns1__GetCurrentSpecBySnResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCurrentSpecBySnResponse::GetCurrentSpecBySnResult = GetCurrentSpecBySnResult;
	}
	return _p;
}

inline int soap_write__ns1__GetCurrentSpecBySnResponse(struct soap *soap, _ns1__GetCurrentSpecBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySnResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCurrentSpecBySnResponse(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySnResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCurrentSpecBySnResponse(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySnResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySnResponse", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySnResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCurrentSpecBySnResponse * SOAP_FMAC4 soap_get__ns1__GetCurrentSpecBySnResponse(struct soap*, _ns1__GetCurrentSpecBySnResponse *, const char*, const char*);

inline int soap_read__ns1__GetCurrentSpecBySnResponse(struct soap *soap, _ns1__GetCurrentSpecBySnResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetCurrentSpecBySnResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCurrentSpecBySnResponse(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySnResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetCurrentSpecBySnResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCurrentSpecBySnResponse(struct soap *soap, _ns1__GetCurrentSpecBySnResponse *p)
{
	if (::soap_read__ns1__GetCurrentSpecBySnResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetCurrentSpecBySn_DEFINED
#define SOAP_TYPE__ns1__GetCurrentSpecBySn_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCurrentSpecBySn(struct soap*, const char*, int, const _ns1__GetCurrentSpecBySn *, const char*);
SOAP_FMAC3 _ns1__GetCurrentSpecBySn * SOAP_FMAC4 soap_in__ns1__GetCurrentSpecBySn(struct soap*, const char*, _ns1__GetCurrentSpecBySn *, const char*);
SOAP_FMAC1 _ns1__GetCurrentSpecBySn * SOAP_FMAC2 soap_instantiate__ns1__GetCurrentSpecBySn(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetCurrentSpecBySn * soap_new__ns1__GetCurrentSpecBySn(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetCurrentSpecBySn(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetCurrentSpecBySn * soap_new_req__ns1__GetCurrentSpecBySn(
	struct soap *soap)
{
	_ns1__GetCurrentSpecBySn *_p = ::soap_new__ns1__GetCurrentSpecBySn(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetCurrentSpecBySn * soap_new_set__ns1__GetCurrentSpecBySn(
	struct soap *soap,
	std::string *ContainerName)
{
	_ns1__GetCurrentSpecBySn *_p = ::soap_new__ns1__GetCurrentSpecBySn(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetCurrentSpecBySn::ContainerName = ContainerName;
	}
	return _p;
}

inline int soap_write__ns1__GetCurrentSpecBySn(struct soap *soap, _ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySn", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySn ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySn", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySn ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetCurrentSpecBySn", p->soap_type() == SOAP_TYPE__ns1__GetCurrentSpecBySn ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetCurrentSpecBySn * SOAP_FMAC4 soap_get__ns1__GetCurrentSpecBySn(struct soap*, _ns1__GetCurrentSpecBySn *, const char*, const char*);

inline int soap_read__ns1__GetCurrentSpecBySn(struct soap *soap, _ns1__GetCurrentSpecBySn *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetCurrentSpecBySn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, _ns1__GetCurrentSpecBySn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetCurrentSpecBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetCurrentSpecBySn(struct soap *soap, _ns1__GetCurrentSpecBySn *p)
{
	if (::soap_read__ns1__GetCurrentSpecBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWorkCenterIDResponse_DEFINED
#define SOAP_TYPE__ns1__GetWorkCenterIDResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWorkCenterIDResponse(struct soap*, const char*, int, const _ns1__GetWorkCenterIDResponse *, const char*);
SOAP_FMAC3 _ns1__GetWorkCenterIDResponse * SOAP_FMAC4 soap_in__ns1__GetWorkCenterIDResponse(struct soap*, const char*, _ns1__GetWorkCenterIDResponse *, const char*);
SOAP_FMAC1 _ns1__GetWorkCenterIDResponse * SOAP_FMAC2 soap_instantiate__ns1__GetWorkCenterIDResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWorkCenterIDResponse * soap_new__ns1__GetWorkCenterIDResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWorkCenterIDResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWorkCenterIDResponse * soap_new_req__ns1__GetWorkCenterIDResponse(
	struct soap *soap)
{
	_ns1__GetWorkCenterIDResponse *_p = ::soap_new__ns1__GetWorkCenterIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWorkCenterIDResponse * soap_new_set__ns1__GetWorkCenterIDResponse(
	struct soap *soap,
	ns1__SubmitResult *GetWorkCenterIDResult)
{
	_ns1__GetWorkCenterIDResponse *_p = ::soap_new__ns1__GetWorkCenterIDResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWorkCenterIDResponse::GetWorkCenterIDResult = GetWorkCenterIDResult;
	}
	return _p;
}

inline int soap_write__ns1__GetWorkCenterIDResponse(struct soap *soap, _ns1__GetWorkCenterIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterIDResponse", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterIDResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWorkCenterIDResponse(struct soap *soap, const char *URL, _ns1__GetWorkCenterIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterIDResponse", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterIDResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWorkCenterIDResponse(struct soap *soap, const char *URL, _ns1__GetWorkCenterIDResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterIDResponse", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterIDResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWorkCenterIDResponse * SOAP_FMAC4 soap_get__ns1__GetWorkCenterIDResponse(struct soap*, _ns1__GetWorkCenterIDResponse *, const char*, const char*);

inline int soap_read__ns1__GetWorkCenterIDResponse(struct soap *soap, _ns1__GetWorkCenterIDResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetWorkCenterIDResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWorkCenterIDResponse(struct soap *soap, const char *URL, _ns1__GetWorkCenterIDResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetWorkCenterIDResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetWorkCenterIDResponse(struct soap *soap, _ns1__GetWorkCenterIDResponse *p)
{
	if (::soap_read__ns1__GetWorkCenterIDResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetWorkCenterID_DEFINED
#define SOAP_TYPE__ns1__GetWorkCenterID_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetWorkCenterID(struct soap*, const char*, int, const _ns1__GetWorkCenterID *, const char*);
SOAP_FMAC3 _ns1__GetWorkCenterID * SOAP_FMAC4 soap_in__ns1__GetWorkCenterID(struct soap*, const char*, _ns1__GetWorkCenterID *, const char*);
SOAP_FMAC1 _ns1__GetWorkCenterID * SOAP_FMAC2 soap_instantiate__ns1__GetWorkCenterID(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetWorkCenterID * soap_new__ns1__GetWorkCenterID(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetWorkCenterID(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetWorkCenterID * soap_new_req__ns1__GetWorkCenterID(
	struct soap *soap)
{
	_ns1__GetWorkCenterID *_p = ::soap_new__ns1__GetWorkCenterID(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetWorkCenterID * soap_new_set__ns1__GetWorkCenterID(
	struct soap *soap,
	std::string *ContainerName)
{
	_ns1__GetWorkCenterID *_p = ::soap_new__ns1__GetWorkCenterID(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetWorkCenterID::ContainerName = ContainerName;
	}
	return _p;
}

inline int soap_write__ns1__GetWorkCenterID(struct soap *soap, _ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterID", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterID ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetWorkCenterID(struct soap *soap, const char *URL, _ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterID", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterID ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetWorkCenterID(struct soap *soap, const char *URL, _ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetWorkCenterID", p->soap_type() == SOAP_TYPE__ns1__GetWorkCenterID ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetWorkCenterID * SOAP_FMAC4 soap_get__ns1__GetWorkCenterID(struct soap*, _ns1__GetWorkCenterID *, const char*, const char*);

inline int soap_read__ns1__GetWorkCenterID(struct soap *soap, _ns1__GetWorkCenterID *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetWorkCenterID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetWorkCenterID(struct soap *soap, const char *URL, _ns1__GetWorkCenterID *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetWorkCenterID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetWorkCenterID(struct soap *soap, _ns1__GetWorkCenterID *p)
{
	if (::soap_read__ns1__GetWorkCenterID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FIDailyWorkReturnEntity_DEFINED
#define SOAP_TYPE_ns1__FIDailyWorkReturnEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FIDailyWorkReturnEntity(struct soap*, const char*, int, const ns1__FIDailyWorkReturnEntity *, const char*);
SOAP_FMAC3 ns1__FIDailyWorkReturnEntity * SOAP_FMAC4 soap_in_ns1__FIDailyWorkReturnEntity(struct soap*, const char*, ns1__FIDailyWorkReturnEntity *, const char*);
SOAP_FMAC1 ns1__FIDailyWorkReturnEntity * SOAP_FMAC2 soap_instantiate_ns1__FIDailyWorkReturnEntity(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FIDailyWorkReturnEntity * soap_new_ns1__FIDailyWorkReturnEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FIDailyWorkReturnEntity(soap, n, NULL, NULL, NULL);
}

inline ns1__FIDailyWorkReturnEntity * soap_new_req_ns1__FIDailyWorkReturnEntity(
	struct soap *soap,
	const std::string& DATAFLAG)
{
	ns1__FIDailyWorkReturnEntity *_p = ::soap_new_ns1__FIDailyWorkReturnEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FIDailyWorkReturnEntity::DATAFLAG = DATAFLAG;
	}
	return _p;
}

inline ns1__FIDailyWorkReturnEntity * soap_new_set_ns1__FIDailyWorkReturnEntity(
	struct soap *soap,
	std::string *RECORD_USCOREID,
	const std::string& DATAFLAG,
	std::string *MESSAGE)
{
	ns1__FIDailyWorkReturnEntity *_p = ::soap_new_ns1__FIDailyWorkReturnEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FIDailyWorkReturnEntity::RECORD_USCOREID = RECORD_USCOREID;
		_p->ns1__FIDailyWorkReturnEntity::DATAFLAG = DATAFLAG;
		_p->ns1__FIDailyWorkReturnEntity::MESSAGE = MESSAGE;
	}
	return _p;
}

inline int soap_write_ns1__FIDailyWorkReturnEntity(struct soap *soap, ns1__FIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__FIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__FIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__FIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__FIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__FIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FIDailyWorkReturnEntity * SOAP_FMAC4 soap_get_ns1__FIDailyWorkReturnEntity(struct soap*, ns1__FIDailyWorkReturnEntity *, const char*, const char*);

inline int soap_read_ns1__FIDailyWorkReturnEntity(struct soap *soap, ns1__FIDailyWorkReturnEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__FIDailyWorkReturnEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__FIDailyWorkReturnEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__FIDailyWorkReturnEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FIDailyWorkReturnEntity(struct soap *soap, ns1__FIDailyWorkReturnEntity *p)
{
	if (::soap_read_ns1__FIDailyWorkReturnEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfFIDailyWorkReturnEntity_DEFINED
#define SOAP_TYPE_ns1__ArrayOfFIDailyWorkReturnEntity_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap*, const char*, int, const ns1__ArrayOfFIDailyWorkReturnEntity *, const char*);
SOAP_FMAC3 ns1__ArrayOfFIDailyWorkReturnEntity * SOAP_FMAC4 soap_in_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap*, const char*, ns1__ArrayOfFIDailyWorkReturnEntity *, const char*);
SOAP_FMAC1 ns1__ArrayOfFIDailyWorkReturnEntity * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfFIDailyWorkReturnEntity * soap_new_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfFIDailyWorkReturnEntity(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfFIDailyWorkReturnEntity * soap_new_req_ns1__ArrayOfFIDailyWorkReturnEntity(
	struct soap *soap)
{
	ns1__ArrayOfFIDailyWorkReturnEntity *_p = ::soap_new_ns1__ArrayOfFIDailyWorkReturnEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfFIDailyWorkReturnEntity * soap_new_set_ns1__ArrayOfFIDailyWorkReturnEntity(
	struct soap *soap,
	const std::vector<ns1__FIDailyWorkReturnEntity *> & FIDailyWorkReturnEntity)
{
	ns1__ArrayOfFIDailyWorkReturnEntity *_p = ::soap_new_ns1__ArrayOfFIDailyWorkReturnEntity(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfFIDailyWorkReturnEntity::FIDailyWorkReturnEntity = FIDailyWorkReturnEntity;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, ns1__ArrayOfFIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfFIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__ArrayOfFIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__ArrayOfFIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfFIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__ArrayOfFIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__ArrayOfFIDailyWorkReturnEntity const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfFIDailyWorkReturnEntity", p->soap_type() == SOAP_TYPE_ns1__ArrayOfFIDailyWorkReturnEntity ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfFIDailyWorkReturnEntity * SOAP_FMAC4 soap_get_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap*, ns1__ArrayOfFIDailyWorkReturnEntity *, const char*, const char*);

inline int soap_read_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, ns1__ArrayOfFIDailyWorkReturnEntity *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfFIDailyWorkReturnEntity(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, const char *URL, ns1__ArrayOfFIDailyWorkReturnEntity *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfFIDailyWorkReturnEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfFIDailyWorkReturnEntity(struct soap *soap, ns1__ArrayOfFIDailyWorkReturnEntity *p)
{
	if (::soap_read_ns1__ArrayOfFIDailyWorkReturnEntity(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MaterialBatchResultInfo_DEFINED
#define SOAP_TYPE_ns1__MaterialBatchResultInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaterialBatchResultInfo(struct soap*, const char*, int, const ns1__MaterialBatchResultInfo *, const char*);
SOAP_FMAC3 ns1__MaterialBatchResultInfo * SOAP_FMAC4 soap_in_ns1__MaterialBatchResultInfo(struct soap*, const char*, ns1__MaterialBatchResultInfo *, const char*);
SOAP_FMAC1 ns1__MaterialBatchResultInfo * SOAP_FMAC2 soap_instantiate_ns1__MaterialBatchResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MaterialBatchResultInfo * soap_new_ns1__MaterialBatchResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MaterialBatchResultInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__MaterialBatchResultInfo * soap_new_req_ns1__MaterialBatchResultInfo(
	struct soap *soap,
	const std::string& RECORD_USCOREID,
	const std::string& DATAFLAG)
{
	ns1__MaterialBatchResultInfo *_p = ::soap_new_ns1__MaterialBatchResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaterialBatchResultInfo::RECORD_USCOREID = RECORD_USCOREID;
		_p->ns1__MaterialBatchResultInfo::DATAFLAG = DATAFLAG;
	}
	return _p;
}

inline ns1__MaterialBatchResultInfo * soap_new_set_ns1__MaterialBatchResultInfo(
	struct soap *soap,
	const std::string& RECORD_USCOREID,
	const std::string& DATAFLAG,
	std::string *MESSAGE)
{
	ns1__MaterialBatchResultInfo *_p = ::soap_new_ns1__MaterialBatchResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaterialBatchResultInfo::RECORD_USCOREID = RECORD_USCOREID;
		_p->ns1__MaterialBatchResultInfo::DATAFLAG = DATAFLAG;
		_p->ns1__MaterialBatchResultInfo::MESSAGE = MESSAGE;
	}
	return _p;
}

inline int soap_write_ns1__MaterialBatchResultInfo(struct soap *soap, ns1__MaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__MaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__MaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__MaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__MaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__MaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MaterialBatchResultInfo * SOAP_FMAC4 soap_get_ns1__MaterialBatchResultInfo(struct soap*, ns1__MaterialBatchResultInfo *, const char*, const char*);

inline int soap_read_ns1__MaterialBatchResultInfo(struct soap *soap, ns1__MaterialBatchResultInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__MaterialBatchResultInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__MaterialBatchResultInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__MaterialBatchResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MaterialBatchResultInfo(struct soap *soap, ns1__MaterialBatchResultInfo *p)
{
	if (::soap_read_ns1__MaterialBatchResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfMaterialBatchResultInfo_DEFINED
#define SOAP_TYPE_ns1__ArrayOfMaterialBatchResultInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfMaterialBatchResultInfo(struct soap*, const char*, int, const ns1__ArrayOfMaterialBatchResultInfo *, const char*);
SOAP_FMAC3 ns1__ArrayOfMaterialBatchResultInfo * SOAP_FMAC4 soap_in_ns1__ArrayOfMaterialBatchResultInfo(struct soap*, const char*, ns1__ArrayOfMaterialBatchResultInfo *, const char*);
SOAP_FMAC1 ns1__ArrayOfMaterialBatchResultInfo * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfMaterialBatchResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfMaterialBatchResultInfo * soap_new_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfMaterialBatchResultInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfMaterialBatchResultInfo * soap_new_req_ns1__ArrayOfMaterialBatchResultInfo(
	struct soap *soap)
{
	ns1__ArrayOfMaterialBatchResultInfo *_p = ::soap_new_ns1__ArrayOfMaterialBatchResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfMaterialBatchResultInfo * soap_new_set_ns1__ArrayOfMaterialBatchResultInfo(
	struct soap *soap,
	const std::vector<ns1__MaterialBatchResultInfo *> & MaterialBatchResultInfo)
{
	ns1__ArrayOfMaterialBatchResultInfo *_p = ::soap_new_ns1__ArrayOfMaterialBatchResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfMaterialBatchResultInfo::MaterialBatchResultInfo = MaterialBatchResultInfo;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, ns1__ArrayOfMaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfMaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfMaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfMaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfMaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfMaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfMaterialBatchResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfMaterialBatchResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfMaterialBatchResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfMaterialBatchResultInfo * SOAP_FMAC4 soap_get_ns1__ArrayOfMaterialBatchResultInfo(struct soap*, ns1__ArrayOfMaterialBatchResultInfo *, const char*, const char*);

inline int soap_read_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, ns1__ArrayOfMaterialBatchResultInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfMaterialBatchResultInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfMaterialBatchResultInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfMaterialBatchResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfMaterialBatchResultInfo(struct soap *soap, ns1__ArrayOfMaterialBatchResultInfo *p)
{
	if (::soap_read_ns1__ArrayOfMaterialBatchResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DefectResultInfo_DEFINED
#define SOAP_TYPE_ns1__DefectResultInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DefectResultInfo(struct soap*, const char*, int, const ns1__DefectResultInfo *, const char*);
SOAP_FMAC3 ns1__DefectResultInfo * SOAP_FMAC4 soap_in_ns1__DefectResultInfo(struct soap*, const char*, ns1__DefectResultInfo *, const char*);
SOAP_FMAC1 ns1__DefectResultInfo * SOAP_FMAC2 soap_instantiate_ns1__DefectResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DefectResultInfo * soap_new_ns1__DefectResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DefectResultInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__DefectResultInfo * soap_new_req_ns1__DefectResultInfo(
	struct soap *soap)
{
	ns1__DefectResultInfo *_p = ::soap_new_ns1__DefectResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__DefectResultInfo * soap_new_set_ns1__DefectResultInfo(
	struct soap *soap,
	std::string *RECORD_USCOREID,
	std::string *DATAFLAG,
	std::string *MESSAGE)
{
	ns1__DefectResultInfo *_p = ::soap_new_ns1__DefectResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DefectResultInfo::RECORD_USCOREID = RECORD_USCOREID;
		_p->ns1__DefectResultInfo::DATAFLAG = DATAFLAG;
		_p->ns1__DefectResultInfo::MESSAGE = MESSAGE;
	}
	return _p;
}

inline int soap_write_ns1__DefectResultInfo(struct soap *soap, ns1__DefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__DefectResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DefectResultInfo(struct soap *soap, const char *URL, ns1__DefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__DefectResultInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DefectResultInfo(struct soap *soap, const char *URL, ns1__DefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__DefectResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DefectResultInfo * SOAP_FMAC4 soap_get_ns1__DefectResultInfo(struct soap*, ns1__DefectResultInfo *, const char*, const char*);

inline int soap_read_ns1__DefectResultInfo(struct soap *soap, ns1__DefectResultInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__DefectResultInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DefectResultInfo(struct soap *soap, const char *URL, ns1__DefectResultInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__DefectResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DefectResultInfo(struct soap *soap, ns1__DefectResultInfo *p)
{
	if (::soap_read_ns1__DefectResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfDefectResultInfo_DEFINED
#define SOAP_TYPE_ns1__ArrayOfDefectResultInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfDefectResultInfo(struct soap*, const char*, int, const ns1__ArrayOfDefectResultInfo *, const char*);
SOAP_FMAC3 ns1__ArrayOfDefectResultInfo * SOAP_FMAC4 soap_in_ns1__ArrayOfDefectResultInfo(struct soap*, const char*, ns1__ArrayOfDefectResultInfo *, const char*);
SOAP_FMAC1 ns1__ArrayOfDefectResultInfo * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfDefectResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfDefectResultInfo * soap_new_ns1__ArrayOfDefectResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfDefectResultInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfDefectResultInfo * soap_new_req_ns1__ArrayOfDefectResultInfo(
	struct soap *soap)
{
	ns1__ArrayOfDefectResultInfo *_p = ::soap_new_ns1__ArrayOfDefectResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfDefectResultInfo * soap_new_set_ns1__ArrayOfDefectResultInfo(
	struct soap *soap,
	const std::vector<ns1__DefectResultInfo *> & DefectResultInfo)
{
	ns1__ArrayOfDefectResultInfo *_p = ::soap_new_ns1__ArrayOfDefectResultInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfDefectResultInfo::DefectResultInfo = DefectResultInfo;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfDefectResultInfo(struct soap *soap, ns1__ArrayOfDefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDefectResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfDefectResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfDefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDefectResultInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfDefectResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfDefectResultInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfDefectResultInfo", p->soap_type() == SOAP_TYPE_ns1__ArrayOfDefectResultInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfDefectResultInfo * SOAP_FMAC4 soap_get_ns1__ArrayOfDefectResultInfo(struct soap*, ns1__ArrayOfDefectResultInfo *, const char*, const char*);

inline int soap_read_ns1__ArrayOfDefectResultInfo(struct soap *soap, ns1__ArrayOfDefectResultInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfDefectResultInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfDefectResultInfo(struct soap *soap, const char *URL, ns1__ArrayOfDefectResultInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfDefectResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfDefectResultInfo(struct soap *soap, ns1__ArrayOfDefectResultInfo *p)
{
	if (::soap_read_ns1__ArrayOfDefectResultInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ArrayOfSubmitResult_DEFINED
#define SOAP_TYPE_ns1__ArrayOfSubmitResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfSubmitResult(struct soap*, const char*, int, const ns1__ArrayOfSubmitResult *, const char*);
SOAP_FMAC3 ns1__ArrayOfSubmitResult * SOAP_FMAC4 soap_in_ns1__ArrayOfSubmitResult(struct soap*, const char*, ns1__ArrayOfSubmitResult *, const char*);
SOAP_FMAC1 ns1__ArrayOfSubmitResult * SOAP_FMAC2 soap_instantiate_ns1__ArrayOfSubmitResult(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ArrayOfSubmitResult * soap_new_ns1__ArrayOfSubmitResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ArrayOfSubmitResult(soap, n, NULL, NULL, NULL);
}

inline ns1__ArrayOfSubmitResult * soap_new_req_ns1__ArrayOfSubmitResult(
	struct soap *soap)
{
	ns1__ArrayOfSubmitResult *_p = ::soap_new_ns1__ArrayOfSubmitResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ArrayOfSubmitResult * soap_new_set_ns1__ArrayOfSubmitResult(
	struct soap *soap,
	const std::vector<ns1__SubmitResult *> & SubmitResult)
{
	ns1__ArrayOfSubmitResult *_p = ::soap_new_ns1__ArrayOfSubmitResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ArrayOfSubmitResult::SubmitResult = SubmitResult;
	}
	return _p;
}

inline int soap_write_ns1__ArrayOfSubmitResult(struct soap *soap, ns1__ArrayOfSubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfSubmitResult", p->soap_type() == SOAP_TYPE_ns1__ArrayOfSubmitResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ArrayOfSubmitResult(struct soap *soap, const char *URL, ns1__ArrayOfSubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfSubmitResult", p->soap_type() == SOAP_TYPE_ns1__ArrayOfSubmitResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ArrayOfSubmitResult(struct soap *soap, const char *URL, ns1__ArrayOfSubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ArrayOfSubmitResult", p->soap_type() == SOAP_TYPE_ns1__ArrayOfSubmitResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ArrayOfSubmitResult * SOAP_FMAC4 soap_get_ns1__ArrayOfSubmitResult(struct soap*, ns1__ArrayOfSubmitResult *, const char*, const char*);

inline int soap_read_ns1__ArrayOfSubmitResult(struct soap *soap, ns1__ArrayOfSubmitResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__ArrayOfSubmitResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ArrayOfSubmitResult(struct soap *soap, const char *URL, ns1__ArrayOfSubmitResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__ArrayOfSubmitResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ArrayOfSubmitResult(struct soap *soap, ns1__ArrayOfSubmitResult *p)
{
	if (::soap_read_ns1__ArrayOfSubmitResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SubmitResult_DEFINED
#define SOAP_TYPE_ns1__SubmitResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SubmitResult(struct soap*, const char*, int, const ns1__SubmitResult *, const char*);
SOAP_FMAC3 ns1__SubmitResult * SOAP_FMAC4 soap_in_ns1__SubmitResult(struct soap*, const char*, ns1__SubmitResult *, const char*);
SOAP_FMAC1 ns1__SubmitResult * SOAP_FMAC2 soap_instantiate_ns1__SubmitResult(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SubmitResult * soap_new_ns1__SubmitResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SubmitResult(soap, n, NULL, NULL, NULL);
}

inline ns1__SubmitResult * soap_new_req_ns1__SubmitResult(
	struct soap *soap)
{
	ns1__SubmitResult *_p = ::soap_new_ns1__SubmitResult(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SubmitResult * soap_new_set_ns1__SubmitResult(
	struct soap *soap,
	std::string *ResultCode,
	std::string *ResultMsg,
	_ns1__SubmitResult_ResultTable *ResultTable,
	std::string *ResultFilename)
{
	ns1__SubmitResult *_p = ::soap_new_ns1__SubmitResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SubmitResult::ResultCode = ResultCode;
		_p->ns1__SubmitResult::ResultMsg = ResultMsg;
		_p->ns1__SubmitResult::ResultTable = ResultTable;
		_p->ns1__SubmitResult::ResultFilename = ResultFilename;
	}
	return _p;
}

inline int soap_write_ns1__SubmitResult(struct soap *soap, ns1__SubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult", p->soap_type() == SOAP_TYPE_ns1__SubmitResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SubmitResult(struct soap *soap, const char *URL, ns1__SubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult", p->soap_type() == SOAP_TYPE_ns1__SubmitResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SubmitResult(struct soap *soap, const char *URL, ns1__SubmitResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SubmitResult", p->soap_type() == SOAP_TYPE_ns1__SubmitResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SubmitResult * SOAP_FMAC4 soap_get_ns1__SubmitResult(struct soap*, ns1__SubmitResult *, const char*, const char*);

inline int soap_read_ns1__SubmitResult(struct soap *soap, ns1__SubmitResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns1__SubmitResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SubmitResult(struct soap *soap, const char *URL, ns1__SubmitResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns1__SubmitResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SubmitResult(struct soap *soap, ns1__SubmitResult *p)
{
	if (::soap_read_ns1__SubmitResult(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__decimal_DEFINED
#define SOAP_TYPE_xsd__decimal_DEFINED

inline void soap_default_xsd__decimal(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, const std::string *);

#define soap_xsd__decimal2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2xsd__decimal(soap, s, a) soap_s2stdchar((soap), (s), (a), 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, std::string*, const char*);

#define soap_instantiate_xsd__decimal soap_instantiate_std__string


#define soap_new_xsd__decimal soap_new_std__string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_xsd__decimal(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__decimal(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_xsd__decimal(soap, p, "xsd:decimal", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, std::string *, const char*, const char*);

inline int soap_read_xsd__decimal(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_xsd__decimal(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__decimal(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__decimal(struct soap *soap, std::string *p)
{
	if (::soap_read_xsd__decimal(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__Login__DEFINED
#define SOAP_TYPE___ns1__Login__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login_(struct soap*, struct __ns1__Login_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login_(struct soap*, const struct __ns1__Login_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login_(struct soap*, const char*, int, const struct __ns1__Login_ *, const char*);
SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_in___ns1__Login_(struct soap*, const char*, struct __ns1__Login_ *, const char*);
SOAP_FMAC1 struct __ns1__Login_ * SOAP_FMAC2 soap_instantiate___ns1__Login_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login_ * soap_new___ns1__Login_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Login_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Login_ * soap_new_req___ns1__Login_(
	struct soap *soap)
{
	struct __ns1__Login_ *_p = ::soap_new___ns1__Login_(soap);
	if (_p)
	{	::soap_default___ns1__Login_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login_ * soap_new_set___ns1__Login_(
	struct soap *soap,
	_ns1__Login *ns1__Login)
{
	struct __ns1__Login_ *_p = ::soap_new___ns1__Login_(soap);
	if (_p)
	{	::soap_default___ns1__Login_(soap, _p);
		_p->ns1__Login = ns1__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login_(struct soap*, const struct __ns1__Login_ *, const char*, const char*);

inline int soap_write___ns1__Login_(struct soap *soap, struct __ns1__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Login_(soap, p), 0) || ::soap_put___ns1__Login_(soap, p, "-ns1:Login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Login_(struct soap *soap, const char *URL, struct __ns1__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Login_(soap, p), 0) || ::soap_put___ns1__Login_(soap, p, "-ns1:Login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Login_(struct soap *soap, const char *URL, struct __ns1__Login_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Login_(soap, p), 0) || ::soap_put___ns1__Login_(soap, p, "-ns1:Login", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Login_ * SOAP_FMAC4 soap_get___ns1__Login_(struct soap*, struct __ns1__Login_ *, const char*, const char*);

inline int soap_read___ns1__Login_(struct soap *soap, struct __ns1__Login_ *p)
{
	if (p)
	{	::soap_default___ns1__Login_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Login_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Login_(struct soap *soap, const char *URL, struct __ns1__Login_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Login_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Login_(struct soap *soap, struct __ns1__Login_ *p)
{
	if (::soap_read___ns1__Login_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CanLogin__DEFINED
#define SOAP_TYPE___ns1__CanLogin__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CanLogin_(struct soap*, struct __ns1__CanLogin_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CanLogin_(struct soap*, const struct __ns1__CanLogin_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CanLogin_(struct soap*, const char*, int, const struct __ns1__CanLogin_ *, const char*);
SOAP_FMAC3 struct __ns1__CanLogin_ * SOAP_FMAC4 soap_in___ns1__CanLogin_(struct soap*, const char*, struct __ns1__CanLogin_ *, const char*);
SOAP_FMAC1 struct __ns1__CanLogin_ * SOAP_FMAC2 soap_instantiate___ns1__CanLogin_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CanLogin_ * soap_new___ns1__CanLogin_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CanLogin_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CanLogin_ * soap_new_req___ns1__CanLogin_(
	struct soap *soap)
{
	struct __ns1__CanLogin_ *_p = ::soap_new___ns1__CanLogin_(soap);
	if (_p)
	{	::soap_default___ns1__CanLogin_(soap, _p);
	}
	return _p;
}

inline struct __ns1__CanLogin_ * soap_new_set___ns1__CanLogin_(
	struct soap *soap,
	_ns1__CanLogin *ns1__CanLogin)
{
	struct __ns1__CanLogin_ *_p = ::soap_new___ns1__CanLogin_(soap);
	if (_p)
	{	::soap_default___ns1__CanLogin_(soap, _p);
		_p->ns1__CanLogin = ns1__CanLogin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CanLogin_(struct soap*, const struct __ns1__CanLogin_ *, const char*, const char*);

inline int soap_write___ns1__CanLogin_(struct soap *soap, struct __ns1__CanLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CanLogin_(soap, p), 0) || ::soap_put___ns1__CanLogin_(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CanLogin_(struct soap *soap, const char *URL, struct __ns1__CanLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CanLogin_(soap, p), 0) || ::soap_put___ns1__CanLogin_(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CanLogin_(struct soap *soap, const char *URL, struct __ns1__CanLogin_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CanLogin_(soap, p), 0) || ::soap_put___ns1__CanLogin_(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CanLogin_ * SOAP_FMAC4 soap_get___ns1__CanLogin_(struct soap*, struct __ns1__CanLogin_ *, const char*, const char*);

inline int soap_read___ns1__CanLogin_(struct soap *soap, struct __ns1__CanLogin_ *p)
{
	if (p)
	{	::soap_default___ns1__CanLogin_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CanLogin_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CanLogin_(struct soap *soap, const char *URL, struct __ns1__CanLogin_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CanLogin_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CanLogin_(struct soap *soap, struct __ns1__CanLogin_ *p)
{
	if (::soap_read___ns1__CanLogin_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs__DEFINED
#define SOAP_TYPE___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, const char*, int, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *, const char*);
SOAP_FMAC3 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * SOAP_FMAC4 soap_in___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, const char*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *, const char*);
SOAP_FMAC1 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * SOAP_FMAC2 soap_instantiate___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * soap_new_req___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(
	struct soap *soap)
{
	struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *_p = ::soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap);
	if (_p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * soap_new_set___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(
	struct soap *soap,
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs)
{
	struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *_p = ::soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap);
	if (_p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, _p);
		_p->ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs = ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *, const char*, const char*);

inline int soap_write___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ * SOAP_FMAC4 soap_get___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *, const char*, const char*);

inline int soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *p)
{
	if (p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_ *p)
{
	if (::soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetMaterialBatchResultToMES__DEFINED
#define SOAP_TYPE___ns1__SetMaterialBatchResultToMES__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMaterialBatchResultToMES_(struct soap*, struct __ns1__SetMaterialBatchResultToMES_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMaterialBatchResultToMES_(struct soap*, const struct __ns1__SetMaterialBatchResultToMES_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMaterialBatchResultToMES_(struct soap*, const char*, int, const struct __ns1__SetMaterialBatchResultToMES_ *, const char*);
SOAP_FMAC3 struct __ns1__SetMaterialBatchResultToMES_ * SOAP_FMAC4 soap_in___ns1__SetMaterialBatchResultToMES_(struct soap*, const char*, struct __ns1__SetMaterialBatchResultToMES_ *, const char*);
SOAP_FMAC1 struct __ns1__SetMaterialBatchResultToMES_ * SOAP_FMAC2 soap_instantiate___ns1__SetMaterialBatchResultToMES_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMaterialBatchResultToMES_ * soap_new___ns1__SetMaterialBatchResultToMES_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetMaterialBatchResultToMES_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetMaterialBatchResultToMES_ * soap_new_req___ns1__SetMaterialBatchResultToMES_(
	struct soap *soap)
{
	struct __ns1__SetMaterialBatchResultToMES_ *_p = ::soap_new___ns1__SetMaterialBatchResultToMES_(soap);
	if (_p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetMaterialBatchResultToMES_ * soap_new_set___ns1__SetMaterialBatchResultToMES_(
	struct soap *soap,
	_ns1__SetMaterialBatchResultToMES *ns1__SetMaterialBatchResultToMES)
{
	struct __ns1__SetMaterialBatchResultToMES_ *_p = ::soap_new___ns1__SetMaterialBatchResultToMES_(soap);
	if (_p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES_(soap, _p);
		_p->ns1__SetMaterialBatchResultToMES = ns1__SetMaterialBatchResultToMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMaterialBatchResultToMES_(struct soap*, const struct __ns1__SetMaterialBatchResultToMES_ *, const char*, const char*);

inline int soap_write___ns1__SetMaterialBatchResultToMES_(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SetMaterialBatchResultToMES_(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES_(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetMaterialBatchResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetMaterialBatchResultToMES_(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES_(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetMaterialBatchResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetMaterialBatchResultToMES_(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES_(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetMaterialBatchResultToMES_ * SOAP_FMAC4 soap_get___ns1__SetMaterialBatchResultToMES_(struct soap*, struct __ns1__SetMaterialBatchResultToMES_ *, const char*, const char*);

inline int soap_read___ns1__SetMaterialBatchResultToMES_(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES_ *p)
{
	if (p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SetMaterialBatchResultToMES_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetMaterialBatchResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SetMaterialBatchResultToMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetMaterialBatchResultToMES_(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES_ *p)
{
	if (::soap_read___ns1__SetMaterialBatchResultToMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetDefectResultToMES__DEFINED
#define SOAP_TYPE___ns1__SetDefectResultToMES__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetDefectResultToMES_(struct soap*, struct __ns1__SetDefectResultToMES_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetDefectResultToMES_(struct soap*, const struct __ns1__SetDefectResultToMES_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetDefectResultToMES_(struct soap*, const char*, int, const struct __ns1__SetDefectResultToMES_ *, const char*);
SOAP_FMAC3 struct __ns1__SetDefectResultToMES_ * SOAP_FMAC4 soap_in___ns1__SetDefectResultToMES_(struct soap*, const char*, struct __ns1__SetDefectResultToMES_ *, const char*);
SOAP_FMAC1 struct __ns1__SetDefectResultToMES_ * SOAP_FMAC2 soap_instantiate___ns1__SetDefectResultToMES_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetDefectResultToMES_ * soap_new___ns1__SetDefectResultToMES_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetDefectResultToMES_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetDefectResultToMES_ * soap_new_req___ns1__SetDefectResultToMES_(
	struct soap *soap)
{
	struct __ns1__SetDefectResultToMES_ *_p = ::soap_new___ns1__SetDefectResultToMES_(soap);
	if (_p)
	{	::soap_default___ns1__SetDefectResultToMES_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetDefectResultToMES_ * soap_new_set___ns1__SetDefectResultToMES_(
	struct soap *soap,
	_ns1__SetDefectResultToMES *ns1__SetDefectResultToMES)
{
	struct __ns1__SetDefectResultToMES_ *_p = ::soap_new___ns1__SetDefectResultToMES_(soap);
	if (_p)
	{	::soap_default___ns1__SetDefectResultToMES_(soap, _p);
		_p->ns1__SetDefectResultToMES = ns1__SetDefectResultToMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetDefectResultToMES_(struct soap*, const struct __ns1__SetDefectResultToMES_ *, const char*, const char*);

inline int soap_write___ns1__SetDefectResultToMES_(struct soap *soap, struct __ns1__SetDefectResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SetDefectResultToMES_(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES_(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetDefectResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetDefectResultToMES_(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES_(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetDefectResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetDefectResultToMES_(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES_(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetDefectResultToMES_ * SOAP_FMAC4 soap_get___ns1__SetDefectResultToMES_(struct soap*, struct __ns1__SetDefectResultToMES_ *, const char*, const char*);

inline int soap_read___ns1__SetDefectResultToMES_(struct soap *soap, struct __ns1__SetDefectResultToMES_ *p)
{
	if (p)
	{	::soap_default___ns1__SetDefectResultToMES_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SetDefectResultToMES_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetDefectResultToMES_(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SetDefectResultToMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetDefectResultToMES_(struct soap *soap, struct __ns1__SetDefectResultToMES_ *p)
{
	if (::soap_read___ns1__SetDefectResultToMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetDefectInfoToSAP__DEFINED
#define SOAP_TYPE___ns1__GetDefectInfoToSAP__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDefectInfoToSAP_(struct soap*, struct __ns1__GetDefectInfoToSAP_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDefectInfoToSAP_(struct soap*, const struct __ns1__GetDefectInfoToSAP_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDefectInfoToSAP_(struct soap*, const char*, int, const struct __ns1__GetDefectInfoToSAP_ *, const char*);
SOAP_FMAC3 struct __ns1__GetDefectInfoToSAP_ * SOAP_FMAC4 soap_in___ns1__GetDefectInfoToSAP_(struct soap*, const char*, struct __ns1__GetDefectInfoToSAP_ *, const char*);
SOAP_FMAC1 struct __ns1__GetDefectInfoToSAP_ * SOAP_FMAC2 soap_instantiate___ns1__GetDefectInfoToSAP_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetDefectInfoToSAP_ * soap_new___ns1__GetDefectInfoToSAP_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetDefectInfoToSAP_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetDefectInfoToSAP_ * soap_new_req___ns1__GetDefectInfoToSAP_(
	struct soap *soap)
{
	struct __ns1__GetDefectInfoToSAP_ *_p = ::soap_new___ns1__GetDefectInfoToSAP_(soap);
	if (_p)
	{	::soap_default___ns1__GetDefectInfoToSAP_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetDefectInfoToSAP_ * soap_new_set___ns1__GetDefectInfoToSAP_(
	struct soap *soap,
	_ns1__GetDefectInfoToSAP *ns1__GetDefectInfoToSAP)
{
	struct __ns1__GetDefectInfoToSAP_ *_p = ::soap_new___ns1__GetDefectInfoToSAP_(soap);
	if (_p)
	{	::soap_default___ns1__GetDefectInfoToSAP_(soap, _p);
		_p->ns1__GetDefectInfoToSAP = ns1__GetDefectInfoToSAP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDefectInfoToSAP_(struct soap*, const struct __ns1__GetDefectInfoToSAP_ *, const char*, const char*);

inline int soap_write___ns1__GetDefectInfoToSAP_(struct soap *soap, struct __ns1__GetDefectInfoToSAP_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetDefectInfoToSAP_(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP_(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetDefectInfoToSAP_(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetDefectInfoToSAP_(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP_(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetDefectInfoToSAP_(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetDefectInfoToSAP_(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP_(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetDefectInfoToSAP_ * SOAP_FMAC4 soap_get___ns1__GetDefectInfoToSAP_(struct soap*, struct __ns1__GetDefectInfoToSAP_ *, const char*, const char*);

inline int soap_read___ns1__GetDefectInfoToSAP_(struct soap *soap, struct __ns1__GetDefectInfoToSAP_ *p)
{
	if (p)
	{	::soap_default___ns1__GetDefectInfoToSAP_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetDefectInfoToSAP_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetDefectInfoToSAP_(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetDefectInfoToSAP_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetDefectInfoToSAP_(struct soap *soap, struct __ns1__GetDefectInfoToSAP_ *p)
{
	if (::soap_read___ns1__GetDefectInfoToSAP_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFtpAddress__DEFINED
#define SOAP_TYPE___ns1__GetFtpAddress__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFtpAddress_(struct soap*, struct __ns1__GetFtpAddress_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFtpAddress_(struct soap*, const struct __ns1__GetFtpAddress_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFtpAddress_(struct soap*, const char*, int, const struct __ns1__GetFtpAddress_ *, const char*);
SOAP_FMAC3 struct __ns1__GetFtpAddress_ * SOAP_FMAC4 soap_in___ns1__GetFtpAddress_(struct soap*, const char*, struct __ns1__GetFtpAddress_ *, const char*);
SOAP_FMAC1 struct __ns1__GetFtpAddress_ * SOAP_FMAC2 soap_instantiate___ns1__GetFtpAddress_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFtpAddress_ * soap_new___ns1__GetFtpAddress_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFtpAddress_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFtpAddress_ * soap_new_req___ns1__GetFtpAddress_(
	struct soap *soap)
{
	struct __ns1__GetFtpAddress_ *_p = ::soap_new___ns1__GetFtpAddress_(soap);
	if (_p)
	{	::soap_default___ns1__GetFtpAddress_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFtpAddress_ * soap_new_set___ns1__GetFtpAddress_(
	struct soap *soap,
	_ns1__GetFtpAddress *ns1__GetFtpAddress)
{
	struct __ns1__GetFtpAddress_ *_p = ::soap_new___ns1__GetFtpAddress_(soap);
	if (_p)
	{	::soap_default___ns1__GetFtpAddress_(soap, _p);
		_p->ns1__GetFtpAddress = ns1__GetFtpAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFtpAddress_(struct soap*, const struct __ns1__GetFtpAddress_ *, const char*, const char*);

inline int soap_write___ns1__GetFtpAddress_(struct soap *soap, struct __ns1__GetFtpAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetFtpAddress_(soap, p), 0) || ::soap_put___ns1__GetFtpAddress_(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFtpAddress_(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetFtpAddress_(soap, p), 0) || ::soap_put___ns1__GetFtpAddress_(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFtpAddress_(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetFtpAddress_(soap, p), 0) || ::soap_put___ns1__GetFtpAddress_(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFtpAddress_ * SOAP_FMAC4 soap_get___ns1__GetFtpAddress_(struct soap*, struct __ns1__GetFtpAddress_ *, const char*, const char*);

inline int soap_read___ns1__GetFtpAddress_(struct soap *soap, struct __ns1__GetFtpAddress_ *p)
{
	if (p)
	{	::soap_default___ns1__GetFtpAddress_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetFtpAddress_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFtpAddress_(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetFtpAddress_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFtpAddress_(struct soap *soap, struct __ns1__GetFtpAddress_ *p)
{
	if (::soap_read___ns1__GetFtpAddress_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Iscalibrationcontainer__DEFINED
#define SOAP_TYPE___ns1__Iscalibrationcontainer__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Iscalibrationcontainer_(struct soap*, struct __ns1__Iscalibrationcontainer_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Iscalibrationcontainer_(struct soap*, const struct __ns1__Iscalibrationcontainer_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Iscalibrationcontainer_(struct soap*, const char*, int, const struct __ns1__Iscalibrationcontainer_ *, const char*);
SOAP_FMAC3 struct __ns1__Iscalibrationcontainer_ * SOAP_FMAC4 soap_in___ns1__Iscalibrationcontainer_(struct soap*, const char*, struct __ns1__Iscalibrationcontainer_ *, const char*);
SOAP_FMAC1 struct __ns1__Iscalibrationcontainer_ * SOAP_FMAC2 soap_instantiate___ns1__Iscalibrationcontainer_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Iscalibrationcontainer_ * soap_new___ns1__Iscalibrationcontainer_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Iscalibrationcontainer_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Iscalibrationcontainer_ * soap_new_req___ns1__Iscalibrationcontainer_(
	struct soap *soap)
{
	struct __ns1__Iscalibrationcontainer_ *_p = ::soap_new___ns1__Iscalibrationcontainer_(soap);
	if (_p)
	{	::soap_default___ns1__Iscalibrationcontainer_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Iscalibrationcontainer_ * soap_new_set___ns1__Iscalibrationcontainer_(
	struct soap *soap,
	_ns1__Iscalibrationcontainer *ns1__Iscalibrationcontainer)
{
	struct __ns1__Iscalibrationcontainer_ *_p = ::soap_new___ns1__Iscalibrationcontainer_(soap);
	if (_p)
	{	::soap_default___ns1__Iscalibrationcontainer_(soap, _p);
		_p->ns1__Iscalibrationcontainer = ns1__Iscalibrationcontainer;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Iscalibrationcontainer_(struct soap*, const struct __ns1__Iscalibrationcontainer_ *, const char*, const char*);

inline int soap_write___ns1__Iscalibrationcontainer_(struct soap *soap, struct __ns1__Iscalibrationcontainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Iscalibrationcontainer_(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer_(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Iscalibrationcontainer_(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Iscalibrationcontainer_(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer_(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Iscalibrationcontainer_(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Iscalibrationcontainer_(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer_(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Iscalibrationcontainer_ * SOAP_FMAC4 soap_get___ns1__Iscalibrationcontainer_(struct soap*, struct __ns1__Iscalibrationcontainer_ *, const char*, const char*);

inline int soap_read___ns1__Iscalibrationcontainer_(struct soap *soap, struct __ns1__Iscalibrationcontainer_ *p)
{
	if (p)
	{	::soap_default___ns1__Iscalibrationcontainer_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Iscalibrationcontainer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Iscalibrationcontainer_(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Iscalibrationcontainer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Iscalibrationcontainer_(struct soap *soap, struct __ns1__Iscalibrationcontainer_ *p)
{
	if (::soap_read___ns1__Iscalibrationcontainer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTensileTestRule__DEFINED
#define SOAP_TYPE___ns1__GetTensileTestRule__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTensileTestRule_(struct soap*, struct __ns1__GetTensileTestRule_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTensileTestRule_(struct soap*, const struct __ns1__GetTensileTestRule_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTensileTestRule_(struct soap*, const char*, int, const struct __ns1__GetTensileTestRule_ *, const char*);
SOAP_FMAC3 struct __ns1__GetTensileTestRule_ * SOAP_FMAC4 soap_in___ns1__GetTensileTestRule_(struct soap*, const char*, struct __ns1__GetTensileTestRule_ *, const char*);
SOAP_FMAC1 struct __ns1__GetTensileTestRule_ * SOAP_FMAC2 soap_instantiate___ns1__GetTensileTestRule_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTensileTestRule_ * soap_new___ns1__GetTensileTestRule_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTensileTestRule_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTensileTestRule_ * soap_new_req___ns1__GetTensileTestRule_(
	struct soap *soap)
{
	struct __ns1__GetTensileTestRule_ *_p = ::soap_new___ns1__GetTensileTestRule_(soap);
	if (_p)
	{	::soap_default___ns1__GetTensileTestRule_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTensileTestRule_ * soap_new_set___ns1__GetTensileTestRule_(
	struct soap *soap,
	_ns1__GetTensileTestRule *ns1__GetTensileTestRule)
{
	struct __ns1__GetTensileTestRule_ *_p = ::soap_new___ns1__GetTensileTestRule_(soap);
	if (_p)
	{	::soap_default___ns1__GetTensileTestRule_(soap, _p);
		_p->ns1__GetTensileTestRule = ns1__GetTensileTestRule;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTensileTestRule_(struct soap*, const struct __ns1__GetTensileTestRule_ *, const char*, const char*);

inline int soap_write___ns1__GetTensileTestRule_(struct soap *soap, struct __ns1__GetTensileTestRule_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetTensileTestRule_(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule_(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTensileTestRule_(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetTensileTestRule_(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule_(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTensileTestRule_(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetTensileTestRule_(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule_(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTensileTestRule_ * SOAP_FMAC4 soap_get___ns1__GetTensileTestRule_(struct soap*, struct __ns1__GetTensileTestRule_ *, const char*, const char*);

inline int soap_read___ns1__GetTensileTestRule_(struct soap *soap, struct __ns1__GetTensileTestRule_ *p)
{
	if (p)
	{	::soap_default___ns1__GetTensileTestRule_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetTensileTestRule_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTensileTestRule_(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetTensileTestRule_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTensileTestRule_(struct soap *soap, struct __ns1__GetTensileTestRule_ *p)
{
	if (::soap_read___ns1__GetTensileTestRule_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetContainerDataInfoMES__DEFINED
#define SOAP_TYPE___ns1__GetContainerDataInfoMES__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetContainerDataInfoMES_(struct soap*, struct __ns1__GetContainerDataInfoMES_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetContainerDataInfoMES_(struct soap*, const struct __ns1__GetContainerDataInfoMES_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetContainerDataInfoMES_(struct soap*, const char*, int, const struct __ns1__GetContainerDataInfoMES_ *, const char*);
SOAP_FMAC3 struct __ns1__GetContainerDataInfoMES_ * SOAP_FMAC4 soap_in___ns1__GetContainerDataInfoMES_(struct soap*, const char*, struct __ns1__GetContainerDataInfoMES_ *, const char*);
SOAP_FMAC1 struct __ns1__GetContainerDataInfoMES_ * SOAP_FMAC2 soap_instantiate___ns1__GetContainerDataInfoMES_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetContainerDataInfoMES_ * soap_new___ns1__GetContainerDataInfoMES_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetContainerDataInfoMES_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetContainerDataInfoMES_ * soap_new_req___ns1__GetContainerDataInfoMES_(
	struct soap *soap)
{
	struct __ns1__GetContainerDataInfoMES_ *_p = ::soap_new___ns1__GetContainerDataInfoMES_(soap);
	if (_p)
	{	::soap_default___ns1__GetContainerDataInfoMES_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetContainerDataInfoMES_ * soap_new_set___ns1__GetContainerDataInfoMES_(
	struct soap *soap,
	_ns1__GetContainerDataInfoMES *ns1__GetContainerDataInfoMES)
{
	struct __ns1__GetContainerDataInfoMES_ *_p = ::soap_new___ns1__GetContainerDataInfoMES_(soap);
	if (_p)
	{	::soap_default___ns1__GetContainerDataInfoMES_(soap, _p);
		_p->ns1__GetContainerDataInfoMES = ns1__GetContainerDataInfoMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetContainerDataInfoMES_(struct soap*, const struct __ns1__GetContainerDataInfoMES_ *, const char*, const char*);

inline int soap_write___ns1__GetContainerDataInfoMES_(struct soap *soap, struct __ns1__GetContainerDataInfoMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetContainerDataInfoMES_(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES_(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetContainerDataInfoMES_(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetContainerDataInfoMES_(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES_(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetContainerDataInfoMES_(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetContainerDataInfoMES_(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES_(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetContainerDataInfoMES_ * SOAP_FMAC4 soap_get___ns1__GetContainerDataInfoMES_(struct soap*, struct __ns1__GetContainerDataInfoMES_ *, const char*, const char*);

inline int soap_read___ns1__GetContainerDataInfoMES_(struct soap *soap, struct __ns1__GetContainerDataInfoMES_ *p)
{
	if (p)
	{	::soap_default___ns1__GetContainerDataInfoMES_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetContainerDataInfoMES_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetContainerDataInfoMES_(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetContainerDataInfoMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetContainerDataInfoMES_(struct soap *soap, struct __ns1__GetContainerDataInfoMES_ *p)
{
	if (::soap_read___ns1__GetContainerDataInfoMES_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadTensileInfoToMes__DEFINED
#define SOAP_TYPE___ns1__UploadTensileInfoToMes__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadTensileInfoToMes_(struct soap*, struct __ns1__UploadTensileInfoToMes_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadTensileInfoToMes_(struct soap*, const struct __ns1__UploadTensileInfoToMes_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadTensileInfoToMes_(struct soap*, const char*, int, const struct __ns1__UploadTensileInfoToMes_ *, const char*);
SOAP_FMAC3 struct __ns1__UploadTensileInfoToMes_ * SOAP_FMAC4 soap_in___ns1__UploadTensileInfoToMes_(struct soap*, const char*, struct __ns1__UploadTensileInfoToMes_ *, const char*);
SOAP_FMAC1 struct __ns1__UploadTensileInfoToMes_ * SOAP_FMAC2 soap_instantiate___ns1__UploadTensileInfoToMes_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadTensileInfoToMes_ * soap_new___ns1__UploadTensileInfoToMes_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadTensileInfoToMes_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadTensileInfoToMes_ * soap_new_req___ns1__UploadTensileInfoToMes_(
	struct soap *soap)
{
	struct __ns1__UploadTensileInfoToMes_ *_p = ::soap_new___ns1__UploadTensileInfoToMes_(soap);
	if (_p)
	{	::soap_default___ns1__UploadTensileInfoToMes_(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadTensileInfoToMes_ * soap_new_set___ns1__UploadTensileInfoToMes_(
	struct soap *soap,
	_ns1__UploadTensileInfoToMes *ns1__UploadTensileInfoToMes)
{
	struct __ns1__UploadTensileInfoToMes_ *_p = ::soap_new___ns1__UploadTensileInfoToMes_(soap);
	if (_p)
	{	::soap_default___ns1__UploadTensileInfoToMes_(soap, _p);
		_p->ns1__UploadTensileInfoToMes = ns1__UploadTensileInfoToMes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadTensileInfoToMes_(struct soap*, const struct __ns1__UploadTensileInfoToMes_ *, const char*, const char*);

inline int soap_write___ns1__UploadTensileInfoToMes_(struct soap *soap, struct __ns1__UploadTensileInfoToMes_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__UploadTensileInfoToMes_(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes_(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadTensileInfoToMes_(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UploadTensileInfoToMes_(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes_(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadTensileInfoToMes_(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UploadTensileInfoToMes_(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes_(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadTensileInfoToMes_ * SOAP_FMAC4 soap_get___ns1__UploadTensileInfoToMes_(struct soap*, struct __ns1__UploadTensileInfoToMes_ *, const char*, const char*);

inline int soap_read___ns1__UploadTensileInfoToMes_(struct soap *soap, struct __ns1__UploadTensileInfoToMes_ *p)
{
	if (p)
	{	::soap_default___ns1__UploadTensileInfoToMes_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__UploadTensileInfoToMes_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadTensileInfoToMes_(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__UploadTensileInfoToMes_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadTensileInfoToMes_(struct soap *soap, struct __ns1__UploadTensileInfoToMes_ *p)
{
	if (::soap_read___ns1__UploadTensileInfoToMes_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SafetyInfoMoveStd__DEFINED
#define SOAP_TYPE___ns1__SafetyInfoMoveStd__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SafetyInfoMoveStd_(struct soap*, struct __ns1__SafetyInfoMoveStd_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SafetyInfoMoveStd_(struct soap*, const struct __ns1__SafetyInfoMoveStd_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SafetyInfoMoveStd_(struct soap*, const char*, int, const struct __ns1__SafetyInfoMoveStd_ *, const char*);
SOAP_FMAC3 struct __ns1__SafetyInfoMoveStd_ * SOAP_FMAC4 soap_in___ns1__SafetyInfoMoveStd_(struct soap*, const char*, struct __ns1__SafetyInfoMoveStd_ *, const char*);
SOAP_FMAC1 struct __ns1__SafetyInfoMoveStd_ * SOAP_FMAC2 soap_instantiate___ns1__SafetyInfoMoveStd_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SafetyInfoMoveStd_ * soap_new___ns1__SafetyInfoMoveStd_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SafetyInfoMoveStd_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SafetyInfoMoveStd_ * soap_new_req___ns1__SafetyInfoMoveStd_(
	struct soap *soap)
{
	struct __ns1__SafetyInfoMoveStd_ *_p = ::soap_new___ns1__SafetyInfoMoveStd_(soap);
	if (_p)
	{	::soap_default___ns1__SafetyInfoMoveStd_(soap, _p);
	}
	return _p;
}

inline struct __ns1__SafetyInfoMoveStd_ * soap_new_set___ns1__SafetyInfoMoveStd_(
	struct soap *soap,
	_ns1__SafetyInfoMoveStd *ns1__SafetyInfoMoveStd)
{
	struct __ns1__SafetyInfoMoveStd_ *_p = ::soap_new___ns1__SafetyInfoMoveStd_(soap);
	if (_p)
	{	::soap_default___ns1__SafetyInfoMoveStd_(soap, _p);
		_p->ns1__SafetyInfoMoveStd = ns1__SafetyInfoMoveStd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SafetyInfoMoveStd_(struct soap*, const struct __ns1__SafetyInfoMoveStd_ *, const char*, const char*);

inline int soap_write___ns1__SafetyInfoMoveStd_(struct soap *soap, struct __ns1__SafetyInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SafetyInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd_(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SafetyInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SafetyInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd_(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SafetyInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SafetyInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd_(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SafetyInfoMoveStd_ * SOAP_FMAC4 soap_get___ns1__SafetyInfoMoveStd_(struct soap*, struct __ns1__SafetyInfoMoveStd_ *, const char*, const char*);

inline int soap_read___ns1__SafetyInfoMoveStd_(struct soap *soap, struct __ns1__SafetyInfoMoveStd_ *p)
{
	if (p)
	{	::soap_default___ns1__SafetyInfoMoveStd_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SafetyInfoMoveStd_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SafetyInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SafetyInfoMoveStd_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SafetyInfoMoveStd_(struct soap *soap, struct __ns1__SafetyInfoMoveStd_ *p)
{
	if (::soap_read___ns1__SafetyInfoMoveStd_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ELInfoMoveStd__DEFINED
#define SOAP_TYPE___ns1__ELInfoMoveStd__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ELInfoMoveStd_(struct soap*, struct __ns1__ELInfoMoveStd_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ELInfoMoveStd_(struct soap*, const struct __ns1__ELInfoMoveStd_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ELInfoMoveStd_(struct soap*, const char*, int, const struct __ns1__ELInfoMoveStd_ *, const char*);
SOAP_FMAC3 struct __ns1__ELInfoMoveStd_ * SOAP_FMAC4 soap_in___ns1__ELInfoMoveStd_(struct soap*, const char*, struct __ns1__ELInfoMoveStd_ *, const char*);
SOAP_FMAC1 struct __ns1__ELInfoMoveStd_ * SOAP_FMAC2 soap_instantiate___ns1__ELInfoMoveStd_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ELInfoMoveStd_ * soap_new___ns1__ELInfoMoveStd_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ELInfoMoveStd_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ELInfoMoveStd_ * soap_new_req___ns1__ELInfoMoveStd_(
	struct soap *soap)
{
	struct __ns1__ELInfoMoveStd_ *_p = ::soap_new___ns1__ELInfoMoveStd_(soap);
	if (_p)
	{	::soap_default___ns1__ELInfoMoveStd_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ELInfoMoveStd_ * soap_new_set___ns1__ELInfoMoveStd_(
	struct soap *soap,
	_ns1__ELInfoMoveStd *ns1__ELInfoMoveStd)
{
	struct __ns1__ELInfoMoveStd_ *_p = ::soap_new___ns1__ELInfoMoveStd_(soap);
	if (_p)
	{	::soap_default___ns1__ELInfoMoveStd_(soap, _p);
		_p->ns1__ELInfoMoveStd = ns1__ELInfoMoveStd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ELInfoMoveStd_(struct soap*, const struct __ns1__ELInfoMoveStd_ *, const char*, const char*);

inline int soap_write___ns1__ELInfoMoveStd_(struct soap *soap, struct __ns1__ELInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ELInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd_(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ELInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd_(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ELInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELInfoMoveStd_(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd_(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ELInfoMoveStd_ * SOAP_FMAC4 soap_get___ns1__ELInfoMoveStd_(struct soap*, struct __ns1__ELInfoMoveStd_ *, const char*, const char*);

inline int soap_read___ns1__ELInfoMoveStd_(struct soap *soap, struct __ns1__ELInfoMoveStd_ *p)
{
	if (p)
	{	::soap_default___ns1__ELInfoMoveStd_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ELInfoMoveStd_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ELInfoMoveStd_(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ELInfoMoveStd_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ELInfoMoveStd_(struct soap *soap, struct __ns1__ELInfoMoveStd_ *p)
{
	if (::soap_read___ns1__ELInfoMoveStd_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ELPictureAddress__DEFINED
#define SOAP_TYPE___ns1__ELPictureAddress__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ELPictureAddress_(struct soap*, struct __ns1__ELPictureAddress_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ELPictureAddress_(struct soap*, const struct __ns1__ELPictureAddress_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ELPictureAddress_(struct soap*, const char*, int, const struct __ns1__ELPictureAddress_ *, const char*);
SOAP_FMAC3 struct __ns1__ELPictureAddress_ * SOAP_FMAC4 soap_in___ns1__ELPictureAddress_(struct soap*, const char*, struct __ns1__ELPictureAddress_ *, const char*);
SOAP_FMAC1 struct __ns1__ELPictureAddress_ * SOAP_FMAC2 soap_instantiate___ns1__ELPictureAddress_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ELPictureAddress_ * soap_new___ns1__ELPictureAddress_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ELPictureAddress_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ELPictureAddress_ * soap_new_req___ns1__ELPictureAddress_(
	struct soap *soap)
{
	struct __ns1__ELPictureAddress_ *_p = ::soap_new___ns1__ELPictureAddress_(soap);
	if (_p)
	{	::soap_default___ns1__ELPictureAddress_(soap, _p);
	}
	return _p;
}

inline struct __ns1__ELPictureAddress_ * soap_new_set___ns1__ELPictureAddress_(
	struct soap *soap,
	_ns1__ELPictureAddress *ns1__ELPictureAddress)
{
	struct __ns1__ELPictureAddress_ *_p = ::soap_new___ns1__ELPictureAddress_(soap);
	if (_p)
	{	::soap_default___ns1__ELPictureAddress_(soap, _p);
		_p->ns1__ELPictureAddress = ns1__ELPictureAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ELPictureAddress_(struct soap*, const struct __ns1__ELPictureAddress_ *, const char*, const char*);

inline int soap_write___ns1__ELPictureAddress_(struct soap *soap, struct __ns1__ELPictureAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ELPictureAddress_(soap, p), 0) || ::soap_put___ns1__ELPictureAddress_(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ELPictureAddress_(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELPictureAddress_(soap, p), 0) || ::soap_put___ns1__ELPictureAddress_(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ELPictureAddress_(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELPictureAddress_(soap, p), 0) || ::soap_put___ns1__ELPictureAddress_(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ELPictureAddress_ * SOAP_FMAC4 soap_get___ns1__ELPictureAddress_(struct soap*, struct __ns1__ELPictureAddress_ *, const char*, const char*);

inline int soap_read___ns1__ELPictureAddress_(struct soap *soap, struct __ns1__ELPictureAddress_ *p)
{
	if (p)
	{	::soap_default___ns1__ELPictureAddress_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ELPictureAddress_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ELPictureAddress_(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ELPictureAddress_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ELPictureAddress_(struct soap *soap, struct __ns1__ELPictureAddress_ *p)
{
	if (::soap_read___ns1__ELPictureAddress_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__jKoIVMoveStd_USCORESpire__DEFINED
#define SOAP_TYPE___ns1__jKoIVMoveStd_USCORESpire__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, struct __ns1__jKoIVMoveStd_USCORESpire_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, const struct __ns1__jKoIVMoveStd_USCORESpire_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, const char*, int, const struct __ns1__jKoIVMoveStd_USCORESpire_ *, const char*);
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCORESpire_ * SOAP_FMAC4 soap_in___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, const char*, struct __ns1__jKoIVMoveStd_USCORESpire_ *, const char*);
SOAP_FMAC1 struct __ns1__jKoIVMoveStd_USCORESpire_ * SOAP_FMAC2 soap_instantiate___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__jKoIVMoveStd_USCORESpire_ * soap_new___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__jKoIVMoveStd_USCORESpire_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__jKoIVMoveStd_USCORESpire_ * soap_new_req___ns1__jKoIVMoveStd_USCORESpire_(
	struct soap *soap)
{
	struct __ns1__jKoIVMoveStd_USCORESpire_ *_p = ::soap_new___ns1__jKoIVMoveStd_USCORESpire_(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire_(soap, _p);
	}
	return _p;
}

inline struct __ns1__jKoIVMoveStd_USCORESpire_ * soap_new_set___ns1__jKoIVMoveStd_USCORESpire_(
	struct soap *soap,
	_ns1__jKoIVMoveStd_USCORESpire *ns1__jKoIVMoveStd_USCORESpire)
{
	struct __ns1__jKoIVMoveStd_USCORESpire_ *_p = ::soap_new___ns1__jKoIVMoveStd_USCORESpire_(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire_(soap, _p);
		_p->ns1__jKoIVMoveStd_USCORESpire = ns1__jKoIVMoveStd_USCORESpire;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, const struct __ns1__jKoIVMoveStd_USCORESpire_ *, const char*, const char*);

inline int soap_write___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire_(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire_(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire_(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCORESpire_ * SOAP_FMAC4 soap_get___ns1__jKoIVMoveStd_USCORESpire_(struct soap*, struct __ns1__jKoIVMoveStd_USCORESpire_ *, const char*, const char*);

inline int soap_read___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire_ *p)
{
	if (p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__jKoIVMoveStd_USCORESpire_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__jKoIVMoveStd_USCORESpire_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__jKoIVMoveStd_USCORESpire_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire_ *p)
{
	if (::soap_read___ns1__jKoIVMoveStd_USCORESpire_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__jKoIVMoveStd_USCOREPasan__DEFINED
#define SOAP_TYPE___ns1__jKoIVMoveStd_USCOREPasan__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, struct __ns1__jKoIVMoveStd_USCOREPasan_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, const struct __ns1__jKoIVMoveStd_USCOREPasan_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, const char*, int, const struct __ns1__jKoIVMoveStd_USCOREPasan_ *, const char*);
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCOREPasan_ * SOAP_FMAC4 soap_in___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, const char*, struct __ns1__jKoIVMoveStd_USCOREPasan_ *, const char*);
SOAP_FMAC1 struct __ns1__jKoIVMoveStd_USCOREPasan_ * SOAP_FMAC2 soap_instantiate___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__jKoIVMoveStd_USCOREPasan_ * soap_new___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__jKoIVMoveStd_USCOREPasan_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__jKoIVMoveStd_USCOREPasan_ * soap_new_req___ns1__jKoIVMoveStd_USCOREPasan_(
	struct soap *soap)
{
	struct __ns1__jKoIVMoveStd_USCOREPasan_ *_p = ::soap_new___ns1__jKoIVMoveStd_USCOREPasan_(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan_(soap, _p);
	}
	return _p;
}

inline struct __ns1__jKoIVMoveStd_USCOREPasan_ * soap_new_set___ns1__jKoIVMoveStd_USCOREPasan_(
	struct soap *soap,
	_ns1__jKoIVMoveStd_USCOREPasan *ns1__jKoIVMoveStd_USCOREPasan)
{
	struct __ns1__jKoIVMoveStd_USCOREPasan_ *_p = ::soap_new___ns1__jKoIVMoveStd_USCOREPasan_(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan_(soap, _p);
		_p->ns1__jKoIVMoveStd_USCOREPasan = ns1__jKoIVMoveStd_USCOREPasan;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, const struct __ns1__jKoIVMoveStd_USCOREPasan_ *, const char*, const char*);

inline int soap_write___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan_(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan_(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan_(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan_(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCOREPasan_ * SOAP_FMAC4 soap_get___ns1__jKoIVMoveStd_USCOREPasan_(struct soap*, struct __ns1__jKoIVMoveStd_USCOREPasan_ *, const char*, const char*);

inline int soap_read___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan_ *p)
{
	if (p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__jKoIVMoveStd_USCOREPasan_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__jKoIVMoveStd_USCOREPasan_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__jKoIVMoveStd_USCOREPasan_(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan_ *p)
{
	if (::soap_read___ns1__jKoIVMoveStd_USCOREPasan_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IV_USCOREDataCollection__DEFINED
#define SOAP_TYPE___ns1__IV_USCOREDataCollection__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IV_USCOREDataCollection_(struct soap*, struct __ns1__IV_USCOREDataCollection_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IV_USCOREDataCollection_(struct soap*, const struct __ns1__IV_USCOREDataCollection_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IV_USCOREDataCollection_(struct soap*, const char*, int, const struct __ns1__IV_USCOREDataCollection_ *, const char*);
SOAP_FMAC3 struct __ns1__IV_USCOREDataCollection_ * SOAP_FMAC4 soap_in___ns1__IV_USCOREDataCollection_(struct soap*, const char*, struct __ns1__IV_USCOREDataCollection_ *, const char*);
SOAP_FMAC1 struct __ns1__IV_USCOREDataCollection_ * SOAP_FMAC2 soap_instantiate___ns1__IV_USCOREDataCollection_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IV_USCOREDataCollection_ * soap_new___ns1__IV_USCOREDataCollection_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IV_USCOREDataCollection_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IV_USCOREDataCollection_ * soap_new_req___ns1__IV_USCOREDataCollection_(
	struct soap *soap)
{
	struct __ns1__IV_USCOREDataCollection_ *_p = ::soap_new___ns1__IV_USCOREDataCollection_(soap);
	if (_p)
	{	::soap_default___ns1__IV_USCOREDataCollection_(soap, _p);
	}
	return _p;
}

inline struct __ns1__IV_USCOREDataCollection_ * soap_new_set___ns1__IV_USCOREDataCollection_(
	struct soap *soap,
	_ns1__IV_USCOREDataCollection *ns1__IV_USCOREDataCollection)
{
	struct __ns1__IV_USCOREDataCollection_ *_p = ::soap_new___ns1__IV_USCOREDataCollection_(soap);
	if (_p)
	{	::soap_default___ns1__IV_USCOREDataCollection_(soap, _p);
		_p->ns1__IV_USCOREDataCollection = ns1__IV_USCOREDataCollection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IV_USCOREDataCollection_(struct soap*, const struct __ns1__IV_USCOREDataCollection_ *, const char*, const char*);

inline int soap_write___ns1__IV_USCOREDataCollection_(struct soap *soap, struct __ns1__IV_USCOREDataCollection_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__IV_USCOREDataCollection_(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection_(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IV_USCOREDataCollection_(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__IV_USCOREDataCollection_(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection_(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IV_USCOREDataCollection_(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__IV_USCOREDataCollection_(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection_(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IV_USCOREDataCollection_ * SOAP_FMAC4 soap_get___ns1__IV_USCOREDataCollection_(struct soap*, struct __ns1__IV_USCOREDataCollection_ *, const char*, const char*);

inline int soap_read___ns1__IV_USCOREDataCollection_(struct soap *soap, struct __ns1__IV_USCOREDataCollection_ *p)
{
	if (p)
	{	::soap_default___ns1__IV_USCOREDataCollection_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__IV_USCOREDataCollection_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IV_USCOREDataCollection_(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__IV_USCOREDataCollection_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IV_USCOREDataCollection_(struct soap *soap, struct __ns1__IV_USCOREDataCollection_ *p)
{
	if (::soap_read___ns1__IV_USCOREDataCollection_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCurrentSpecBySn__DEFINED
#define SOAP_TYPE___ns1__GetCurrentSpecBySn__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCurrentSpecBySn_(struct soap*, struct __ns1__GetCurrentSpecBySn_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCurrentSpecBySn_(struct soap*, const struct __ns1__GetCurrentSpecBySn_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCurrentSpecBySn_(struct soap*, const char*, int, const struct __ns1__GetCurrentSpecBySn_ *, const char*);
SOAP_FMAC3 struct __ns1__GetCurrentSpecBySn_ * SOAP_FMAC4 soap_in___ns1__GetCurrentSpecBySn_(struct soap*, const char*, struct __ns1__GetCurrentSpecBySn_ *, const char*);
SOAP_FMAC1 struct __ns1__GetCurrentSpecBySn_ * SOAP_FMAC2 soap_instantiate___ns1__GetCurrentSpecBySn_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCurrentSpecBySn_ * soap_new___ns1__GetCurrentSpecBySn_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCurrentSpecBySn_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCurrentSpecBySn_ * soap_new_req___ns1__GetCurrentSpecBySn_(
	struct soap *soap)
{
	struct __ns1__GetCurrentSpecBySn_ *_p = ::soap_new___ns1__GetCurrentSpecBySn_(soap);
	if (_p)
	{	::soap_default___ns1__GetCurrentSpecBySn_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCurrentSpecBySn_ * soap_new_set___ns1__GetCurrentSpecBySn_(
	struct soap *soap,
	_ns1__GetCurrentSpecBySn *ns1__GetCurrentSpecBySn)
{
	struct __ns1__GetCurrentSpecBySn_ *_p = ::soap_new___ns1__GetCurrentSpecBySn_(soap);
	if (_p)
	{	::soap_default___ns1__GetCurrentSpecBySn_(soap, _p);
		_p->ns1__GetCurrentSpecBySn = ns1__GetCurrentSpecBySn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCurrentSpecBySn_(struct soap*, const struct __ns1__GetCurrentSpecBySn_ *, const char*, const char*);

inline int soap_write___ns1__GetCurrentSpecBySn_(struct soap *soap, struct __ns1__GetCurrentSpecBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetCurrentSpecBySn_(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn_(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCurrentSpecBySn_(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetCurrentSpecBySn_(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn_(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCurrentSpecBySn_(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetCurrentSpecBySn_(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn_(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCurrentSpecBySn_ * SOAP_FMAC4 soap_get___ns1__GetCurrentSpecBySn_(struct soap*, struct __ns1__GetCurrentSpecBySn_ *, const char*, const char*);

inline int soap_read___ns1__GetCurrentSpecBySn_(struct soap *soap, struct __ns1__GetCurrentSpecBySn_ *p)
{
	if (p)
	{	::soap_default___ns1__GetCurrentSpecBySn_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetCurrentSpecBySn_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCurrentSpecBySn_(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetCurrentSpecBySn_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCurrentSpecBySn_(struct soap *soap, struct __ns1__GetCurrentSpecBySn_ *p)
{
	if (::soap_read___ns1__GetCurrentSpecBySn_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetWorkCenterID__DEFINED
#define SOAP_TYPE___ns1__GetWorkCenterID__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWorkCenterID_(struct soap*, struct __ns1__GetWorkCenterID_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWorkCenterID_(struct soap*, const struct __ns1__GetWorkCenterID_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWorkCenterID_(struct soap*, const char*, int, const struct __ns1__GetWorkCenterID_ *, const char*);
SOAP_FMAC3 struct __ns1__GetWorkCenterID_ * SOAP_FMAC4 soap_in___ns1__GetWorkCenterID_(struct soap*, const char*, struct __ns1__GetWorkCenterID_ *, const char*);
SOAP_FMAC1 struct __ns1__GetWorkCenterID_ * SOAP_FMAC2 soap_instantiate___ns1__GetWorkCenterID_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWorkCenterID_ * soap_new___ns1__GetWorkCenterID_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWorkCenterID_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWorkCenterID_ * soap_new_req___ns1__GetWorkCenterID_(
	struct soap *soap)
{
	struct __ns1__GetWorkCenterID_ *_p = ::soap_new___ns1__GetWorkCenterID_(soap);
	if (_p)
	{	::soap_default___ns1__GetWorkCenterID_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWorkCenterID_ * soap_new_set___ns1__GetWorkCenterID_(
	struct soap *soap,
	_ns1__GetWorkCenterID *ns1__GetWorkCenterID)
{
	struct __ns1__GetWorkCenterID_ *_p = ::soap_new___ns1__GetWorkCenterID_(soap);
	if (_p)
	{	::soap_default___ns1__GetWorkCenterID_(soap, _p);
		_p->ns1__GetWorkCenterID = ns1__GetWorkCenterID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWorkCenterID_(struct soap*, const struct __ns1__GetWorkCenterID_ *, const char*, const char*);

inline int soap_write___ns1__GetWorkCenterID_(struct soap *soap, struct __ns1__GetWorkCenterID_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetWorkCenterID_(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID_(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWorkCenterID_(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWorkCenterID_(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID_(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWorkCenterID_(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWorkCenterID_(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID_(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWorkCenterID_ * SOAP_FMAC4 soap_get___ns1__GetWorkCenterID_(struct soap*, struct __ns1__GetWorkCenterID_ *, const char*, const char*);

inline int soap_read___ns1__GetWorkCenterID_(struct soap *soap, struct __ns1__GetWorkCenterID_ *p)
{
	if (p)
	{	::soap_default___ns1__GetWorkCenterID_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetWorkCenterID_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWorkCenterID_(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetWorkCenterID_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetWorkCenterID_(struct soap *soap, struct __ns1__GetWorkCenterID_ *p)
{
	if (::soap_read___ns1__GetWorkCenterID_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Login_DEFINED
#define SOAP_TYPE___ns1__Login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Login(struct soap*, struct __ns1__Login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Login(struct soap*, const struct __ns1__Login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Login(struct soap*, const char*, int, const struct __ns1__Login *, const char*);
SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_in___ns1__Login(struct soap*, const char*, struct __ns1__Login *, const char*);
SOAP_FMAC1 struct __ns1__Login * SOAP_FMAC2 soap_instantiate___ns1__Login(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Login * soap_new___ns1__Login(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Login(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Login * soap_new_req___ns1__Login(
	struct soap *soap)
{
	struct __ns1__Login *_p = ::soap_new___ns1__Login(soap);
	if (_p)
	{	::soap_default___ns1__Login(soap, _p);
	}
	return _p;
}

inline struct __ns1__Login * soap_new_set___ns1__Login(
	struct soap *soap,
	_ns1__Login *ns1__Login)
{
	struct __ns1__Login *_p = ::soap_new___ns1__Login(soap);
	if (_p)
	{	::soap_default___ns1__Login(soap, _p);
		_p->ns1__Login = ns1__Login;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Login(struct soap*, const struct __ns1__Login *, const char*, const char*);

inline int soap_write___ns1__Login(struct soap *soap, struct __ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Login(soap, p), 0) || ::soap_put___ns1__Login(soap, p, "-ns1:Login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Login(struct soap *soap, const char *URL, struct __ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Login(soap, p), 0) || ::soap_put___ns1__Login(soap, p, "-ns1:Login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Login(struct soap *soap, const char *URL, struct __ns1__Login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Login(soap, p), 0) || ::soap_put___ns1__Login(soap, p, "-ns1:Login", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Login * SOAP_FMAC4 soap_get___ns1__Login(struct soap*, struct __ns1__Login *, const char*, const char*);

inline int soap_read___ns1__Login(struct soap *soap, struct __ns1__Login *p)
{
	if (p)
	{	::soap_default___ns1__Login(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Login(struct soap *soap, const char *URL, struct __ns1__Login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Login(struct soap *soap, struct __ns1__Login *p)
{
	if (::soap_read___ns1__Login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__CanLogin_DEFINED
#define SOAP_TYPE___ns1__CanLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CanLogin(struct soap*, struct __ns1__CanLogin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CanLogin(struct soap*, const struct __ns1__CanLogin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CanLogin(struct soap*, const char*, int, const struct __ns1__CanLogin *, const char*);
SOAP_FMAC3 struct __ns1__CanLogin * SOAP_FMAC4 soap_in___ns1__CanLogin(struct soap*, const char*, struct __ns1__CanLogin *, const char*);
SOAP_FMAC1 struct __ns1__CanLogin * SOAP_FMAC2 soap_instantiate___ns1__CanLogin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CanLogin * soap_new___ns1__CanLogin(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CanLogin(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CanLogin * soap_new_req___ns1__CanLogin(
	struct soap *soap)
{
	struct __ns1__CanLogin *_p = ::soap_new___ns1__CanLogin(soap);
	if (_p)
	{	::soap_default___ns1__CanLogin(soap, _p);
	}
	return _p;
}

inline struct __ns1__CanLogin * soap_new_set___ns1__CanLogin(
	struct soap *soap,
	_ns1__CanLogin *ns1__CanLogin)
{
	struct __ns1__CanLogin *_p = ::soap_new___ns1__CanLogin(soap);
	if (_p)
	{	::soap_default___ns1__CanLogin(soap, _p);
		_p->ns1__CanLogin = ns1__CanLogin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CanLogin(struct soap*, const struct __ns1__CanLogin *, const char*, const char*);

inline int soap_write___ns1__CanLogin(struct soap *soap, struct __ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__CanLogin(soap, p), 0) || ::soap_put___ns1__CanLogin(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__CanLogin(struct soap *soap, const char *URL, struct __ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CanLogin(soap, p), 0) || ::soap_put___ns1__CanLogin(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__CanLogin(struct soap *soap, const char *URL, struct __ns1__CanLogin const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__CanLogin(soap, p), 0) || ::soap_put___ns1__CanLogin(soap, p, "-ns1:CanLogin", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CanLogin * SOAP_FMAC4 soap_get___ns1__CanLogin(struct soap*, struct __ns1__CanLogin *, const char*, const char*);

inline int soap_read___ns1__CanLogin(struct soap *soap, struct __ns1__CanLogin *p)
{
	if (p)
	{	::soap_default___ns1__CanLogin(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__CanLogin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__CanLogin(struct soap *soap, const char *URL, struct __ns1__CanLogin *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__CanLogin(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__CanLogin(struct soap *soap, struct __ns1__CanLogin *p)
{
	if (::soap_read___ns1__CanLogin(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
#define SOAP_TYPE___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char*, int, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*);
SOAP_FMAC3 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC4 soap_in___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*);
SOAP_FMAC1 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC2 soap_instantiate___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new_req___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(
	struct soap *soap)
{
	struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *_p = ::soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap);
	if (_p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, _p);
	}
	return _p;
}

inline struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * soap_new_set___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(
	struct soap *soap,
	_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs)
{
	struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *_p = ::soap_new___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap);
	if (_p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, _p);
		_p->ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs = ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*, const char*);

inline int soap_write___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p), 0) || ::soap_put___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p, "-ns1:Upload_FIDWUL_DATAFLAGs", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs * SOAP_FMAC4 soap_get___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *, const char*, const char*);

inline int soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (p)
	{	::soap_default___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, const char *URL, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap *soap, struct __ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *p)
{
	if (::soap_read___ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetMaterialBatchResultToMES_DEFINED
#define SOAP_TYPE___ns1__SetMaterialBatchResultToMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetMaterialBatchResultToMES(struct soap*, struct __ns1__SetMaterialBatchResultToMES *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetMaterialBatchResultToMES(struct soap*, const struct __ns1__SetMaterialBatchResultToMES *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetMaterialBatchResultToMES(struct soap*, const char*, int, const struct __ns1__SetMaterialBatchResultToMES *, const char*);
SOAP_FMAC3 struct __ns1__SetMaterialBatchResultToMES * SOAP_FMAC4 soap_in___ns1__SetMaterialBatchResultToMES(struct soap*, const char*, struct __ns1__SetMaterialBatchResultToMES *, const char*);
SOAP_FMAC1 struct __ns1__SetMaterialBatchResultToMES * SOAP_FMAC2 soap_instantiate___ns1__SetMaterialBatchResultToMES(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetMaterialBatchResultToMES * soap_new___ns1__SetMaterialBatchResultToMES(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetMaterialBatchResultToMES(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetMaterialBatchResultToMES * soap_new_req___ns1__SetMaterialBatchResultToMES(
	struct soap *soap)
{
	struct __ns1__SetMaterialBatchResultToMES *_p = ::soap_new___ns1__SetMaterialBatchResultToMES(soap);
	if (_p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetMaterialBatchResultToMES * soap_new_set___ns1__SetMaterialBatchResultToMES(
	struct soap *soap,
	_ns1__SetMaterialBatchResultToMES *ns1__SetMaterialBatchResultToMES)
{
	struct __ns1__SetMaterialBatchResultToMES *_p = ::soap_new___ns1__SetMaterialBatchResultToMES(soap);
	if (_p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES(soap, _p);
		_p->ns1__SetMaterialBatchResultToMES = ns1__SetMaterialBatchResultToMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetMaterialBatchResultToMES(struct soap*, const struct __ns1__SetMaterialBatchResultToMES *, const char*, const char*);

inline int soap_write___ns1__SetMaterialBatchResultToMES(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SetMaterialBatchResultToMES(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetMaterialBatchResultToMES(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetMaterialBatchResultToMES(soap, p), 0) || ::soap_put___ns1__SetMaterialBatchResultToMES(soap, p, "-ns1:SetMaterialBatchResultToMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetMaterialBatchResultToMES * SOAP_FMAC4 soap_get___ns1__SetMaterialBatchResultToMES(struct soap*, struct __ns1__SetMaterialBatchResultToMES *, const char*, const char*);

inline int soap_read___ns1__SetMaterialBatchResultToMES(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES *p)
{
	if (p)
	{	::soap_default___ns1__SetMaterialBatchResultToMES(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SetMaterialBatchResultToMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetMaterialBatchResultToMES(struct soap *soap, const char *URL, struct __ns1__SetMaterialBatchResultToMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SetMaterialBatchResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetMaterialBatchResultToMES(struct soap *soap, struct __ns1__SetMaterialBatchResultToMES *p)
{
	if (::soap_read___ns1__SetMaterialBatchResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SetDefectResultToMES_DEFINED
#define SOAP_TYPE___ns1__SetDefectResultToMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetDefectResultToMES(struct soap*, struct __ns1__SetDefectResultToMES *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetDefectResultToMES(struct soap*, const struct __ns1__SetDefectResultToMES *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetDefectResultToMES(struct soap*, const char*, int, const struct __ns1__SetDefectResultToMES *, const char*);
SOAP_FMAC3 struct __ns1__SetDefectResultToMES * SOAP_FMAC4 soap_in___ns1__SetDefectResultToMES(struct soap*, const char*, struct __ns1__SetDefectResultToMES *, const char*);
SOAP_FMAC1 struct __ns1__SetDefectResultToMES * SOAP_FMAC2 soap_instantiate___ns1__SetDefectResultToMES(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetDefectResultToMES * soap_new___ns1__SetDefectResultToMES(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SetDefectResultToMES(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SetDefectResultToMES * soap_new_req___ns1__SetDefectResultToMES(
	struct soap *soap)
{
	struct __ns1__SetDefectResultToMES *_p = ::soap_new___ns1__SetDefectResultToMES(soap);
	if (_p)
	{	::soap_default___ns1__SetDefectResultToMES(soap, _p);
	}
	return _p;
}

inline struct __ns1__SetDefectResultToMES * soap_new_set___ns1__SetDefectResultToMES(
	struct soap *soap,
	_ns1__SetDefectResultToMES *ns1__SetDefectResultToMES)
{
	struct __ns1__SetDefectResultToMES *_p = ::soap_new___ns1__SetDefectResultToMES(soap);
	if (_p)
	{	::soap_default___ns1__SetDefectResultToMES(soap, _p);
		_p->ns1__SetDefectResultToMES = ns1__SetDefectResultToMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetDefectResultToMES(struct soap*, const struct __ns1__SetDefectResultToMES *, const char*, const char*);

inline int soap_write___ns1__SetDefectResultToMES(struct soap *soap, struct __ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SetDefectResultToMES(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SetDefectResultToMES(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetDefectResultToMES(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SetDefectResultToMES(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SetDefectResultToMES(soap, p), 0) || ::soap_put___ns1__SetDefectResultToMES(soap, p, "-ns1:SetDefectResultToMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SetDefectResultToMES * SOAP_FMAC4 soap_get___ns1__SetDefectResultToMES(struct soap*, struct __ns1__SetDefectResultToMES *, const char*, const char*);

inline int soap_read___ns1__SetDefectResultToMES(struct soap *soap, struct __ns1__SetDefectResultToMES *p)
{
	if (p)
	{	::soap_default___ns1__SetDefectResultToMES(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SetDefectResultToMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SetDefectResultToMES(struct soap *soap, const char *URL, struct __ns1__SetDefectResultToMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SetDefectResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SetDefectResultToMES(struct soap *soap, struct __ns1__SetDefectResultToMES *p)
{
	if (::soap_read___ns1__SetDefectResultToMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetDefectInfoToSAP_DEFINED
#define SOAP_TYPE___ns1__GetDefectInfoToSAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDefectInfoToSAP(struct soap*, struct __ns1__GetDefectInfoToSAP *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDefectInfoToSAP(struct soap*, const struct __ns1__GetDefectInfoToSAP *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDefectInfoToSAP(struct soap*, const char*, int, const struct __ns1__GetDefectInfoToSAP *, const char*);
SOAP_FMAC3 struct __ns1__GetDefectInfoToSAP * SOAP_FMAC4 soap_in___ns1__GetDefectInfoToSAP(struct soap*, const char*, struct __ns1__GetDefectInfoToSAP *, const char*);
SOAP_FMAC1 struct __ns1__GetDefectInfoToSAP * SOAP_FMAC2 soap_instantiate___ns1__GetDefectInfoToSAP(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetDefectInfoToSAP * soap_new___ns1__GetDefectInfoToSAP(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetDefectInfoToSAP(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetDefectInfoToSAP * soap_new_req___ns1__GetDefectInfoToSAP(
	struct soap *soap)
{
	struct __ns1__GetDefectInfoToSAP *_p = ::soap_new___ns1__GetDefectInfoToSAP(soap);
	if (_p)
	{	::soap_default___ns1__GetDefectInfoToSAP(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetDefectInfoToSAP * soap_new_set___ns1__GetDefectInfoToSAP(
	struct soap *soap,
	_ns1__GetDefectInfoToSAP *ns1__GetDefectInfoToSAP)
{
	struct __ns1__GetDefectInfoToSAP *_p = ::soap_new___ns1__GetDefectInfoToSAP(soap);
	if (_p)
	{	::soap_default___ns1__GetDefectInfoToSAP(soap, _p);
		_p->ns1__GetDefectInfoToSAP = ns1__GetDefectInfoToSAP;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDefectInfoToSAP(struct soap*, const struct __ns1__GetDefectInfoToSAP *, const char*, const char*);

inline int soap_write___ns1__GetDefectInfoToSAP(struct soap *soap, struct __ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetDefectInfoToSAP(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetDefectInfoToSAP(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetDefectInfoToSAP(soap, p), 0) || ::soap_put___ns1__GetDefectInfoToSAP(soap, p, "-ns1:GetDefectInfoToSAP", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetDefectInfoToSAP * SOAP_FMAC4 soap_get___ns1__GetDefectInfoToSAP(struct soap*, struct __ns1__GetDefectInfoToSAP *, const char*, const char*);

inline int soap_read___ns1__GetDefectInfoToSAP(struct soap *soap, struct __ns1__GetDefectInfoToSAP *p)
{
	if (p)
	{	::soap_default___ns1__GetDefectInfoToSAP(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetDefectInfoToSAP(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetDefectInfoToSAP(struct soap *soap, const char *URL, struct __ns1__GetDefectInfoToSAP *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetDefectInfoToSAP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetDefectInfoToSAP(struct soap *soap, struct __ns1__GetDefectInfoToSAP *p)
{
	if (::soap_read___ns1__GetDefectInfoToSAP(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetFtpAddress_DEFINED
#define SOAP_TYPE___ns1__GetFtpAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetFtpAddress(struct soap*, struct __ns1__GetFtpAddress *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetFtpAddress(struct soap*, const struct __ns1__GetFtpAddress *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetFtpAddress(struct soap*, const char*, int, const struct __ns1__GetFtpAddress *, const char*);
SOAP_FMAC3 struct __ns1__GetFtpAddress * SOAP_FMAC4 soap_in___ns1__GetFtpAddress(struct soap*, const char*, struct __ns1__GetFtpAddress *, const char*);
SOAP_FMAC1 struct __ns1__GetFtpAddress * SOAP_FMAC2 soap_instantiate___ns1__GetFtpAddress(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetFtpAddress * soap_new___ns1__GetFtpAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetFtpAddress(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetFtpAddress * soap_new_req___ns1__GetFtpAddress(
	struct soap *soap)
{
	struct __ns1__GetFtpAddress *_p = ::soap_new___ns1__GetFtpAddress(soap);
	if (_p)
	{	::soap_default___ns1__GetFtpAddress(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetFtpAddress * soap_new_set___ns1__GetFtpAddress(
	struct soap *soap,
	_ns1__GetFtpAddress *ns1__GetFtpAddress)
{
	struct __ns1__GetFtpAddress *_p = ::soap_new___ns1__GetFtpAddress(soap);
	if (_p)
	{	::soap_default___ns1__GetFtpAddress(soap, _p);
		_p->ns1__GetFtpAddress = ns1__GetFtpAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetFtpAddress(struct soap*, const struct __ns1__GetFtpAddress *, const char*, const char*);

inline int soap_write___ns1__GetFtpAddress(struct soap *soap, struct __ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetFtpAddress(soap, p), 0) || ::soap_put___ns1__GetFtpAddress(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetFtpAddress(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetFtpAddress(soap, p), 0) || ::soap_put___ns1__GetFtpAddress(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetFtpAddress(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetFtpAddress(soap, p), 0) || ::soap_put___ns1__GetFtpAddress(soap, p, "-ns1:GetFtpAddress", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetFtpAddress * SOAP_FMAC4 soap_get___ns1__GetFtpAddress(struct soap*, struct __ns1__GetFtpAddress *, const char*, const char*);

inline int soap_read___ns1__GetFtpAddress(struct soap *soap, struct __ns1__GetFtpAddress *p)
{
	if (p)
	{	::soap_default___ns1__GetFtpAddress(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetFtpAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetFtpAddress(struct soap *soap, const char *URL, struct __ns1__GetFtpAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetFtpAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetFtpAddress(struct soap *soap, struct __ns1__GetFtpAddress *p)
{
	if (::soap_read___ns1__GetFtpAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Iscalibrationcontainer_DEFINED
#define SOAP_TYPE___ns1__Iscalibrationcontainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Iscalibrationcontainer(struct soap*, struct __ns1__Iscalibrationcontainer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Iscalibrationcontainer(struct soap*, const struct __ns1__Iscalibrationcontainer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Iscalibrationcontainer(struct soap*, const char*, int, const struct __ns1__Iscalibrationcontainer *, const char*);
SOAP_FMAC3 struct __ns1__Iscalibrationcontainer * SOAP_FMAC4 soap_in___ns1__Iscalibrationcontainer(struct soap*, const char*, struct __ns1__Iscalibrationcontainer *, const char*);
SOAP_FMAC1 struct __ns1__Iscalibrationcontainer * SOAP_FMAC2 soap_instantiate___ns1__Iscalibrationcontainer(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Iscalibrationcontainer * soap_new___ns1__Iscalibrationcontainer(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Iscalibrationcontainer(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Iscalibrationcontainer * soap_new_req___ns1__Iscalibrationcontainer(
	struct soap *soap)
{
	struct __ns1__Iscalibrationcontainer *_p = ::soap_new___ns1__Iscalibrationcontainer(soap);
	if (_p)
	{	::soap_default___ns1__Iscalibrationcontainer(soap, _p);
	}
	return _p;
}

inline struct __ns1__Iscalibrationcontainer * soap_new_set___ns1__Iscalibrationcontainer(
	struct soap *soap,
	_ns1__Iscalibrationcontainer *ns1__Iscalibrationcontainer)
{
	struct __ns1__Iscalibrationcontainer *_p = ::soap_new___ns1__Iscalibrationcontainer(soap);
	if (_p)
	{	::soap_default___ns1__Iscalibrationcontainer(soap, _p);
		_p->ns1__Iscalibrationcontainer = ns1__Iscalibrationcontainer;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Iscalibrationcontainer(struct soap*, const struct __ns1__Iscalibrationcontainer *, const char*, const char*);

inline int soap_write___ns1__Iscalibrationcontainer(struct soap *soap, struct __ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Iscalibrationcontainer(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Iscalibrationcontainer(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Iscalibrationcontainer(soap, p), 0) || ::soap_put___ns1__Iscalibrationcontainer(soap, p, "-ns1:Iscalibrationcontainer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Iscalibrationcontainer * SOAP_FMAC4 soap_get___ns1__Iscalibrationcontainer(struct soap*, struct __ns1__Iscalibrationcontainer *, const char*, const char*);

inline int soap_read___ns1__Iscalibrationcontainer(struct soap *soap, struct __ns1__Iscalibrationcontainer *p)
{
	if (p)
	{	::soap_default___ns1__Iscalibrationcontainer(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Iscalibrationcontainer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Iscalibrationcontainer(struct soap *soap, const char *URL, struct __ns1__Iscalibrationcontainer *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Iscalibrationcontainer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Iscalibrationcontainer(struct soap *soap, struct __ns1__Iscalibrationcontainer *p)
{
	if (::soap_read___ns1__Iscalibrationcontainer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetTensileTestRule_DEFINED
#define SOAP_TYPE___ns1__GetTensileTestRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTensileTestRule(struct soap*, struct __ns1__GetTensileTestRule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTensileTestRule(struct soap*, const struct __ns1__GetTensileTestRule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTensileTestRule(struct soap*, const char*, int, const struct __ns1__GetTensileTestRule *, const char*);
SOAP_FMAC3 struct __ns1__GetTensileTestRule * SOAP_FMAC4 soap_in___ns1__GetTensileTestRule(struct soap*, const char*, struct __ns1__GetTensileTestRule *, const char*);
SOAP_FMAC1 struct __ns1__GetTensileTestRule * SOAP_FMAC2 soap_instantiate___ns1__GetTensileTestRule(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTensileTestRule * soap_new___ns1__GetTensileTestRule(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetTensileTestRule(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetTensileTestRule * soap_new_req___ns1__GetTensileTestRule(
	struct soap *soap)
{
	struct __ns1__GetTensileTestRule *_p = ::soap_new___ns1__GetTensileTestRule(soap);
	if (_p)
	{	::soap_default___ns1__GetTensileTestRule(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetTensileTestRule * soap_new_set___ns1__GetTensileTestRule(
	struct soap *soap,
	_ns1__GetTensileTestRule *ns1__GetTensileTestRule)
{
	struct __ns1__GetTensileTestRule *_p = ::soap_new___ns1__GetTensileTestRule(soap);
	if (_p)
	{	::soap_default___ns1__GetTensileTestRule(soap, _p);
		_p->ns1__GetTensileTestRule = ns1__GetTensileTestRule;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTensileTestRule(struct soap*, const struct __ns1__GetTensileTestRule *, const char*, const char*);

inline int soap_write___ns1__GetTensileTestRule(struct soap *soap, struct __ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetTensileTestRule(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetTensileTestRule(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetTensileTestRule(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetTensileTestRule(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetTensileTestRule(soap, p), 0) || ::soap_put___ns1__GetTensileTestRule(soap, p, "-ns1:GetTensileTestRule", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetTensileTestRule * SOAP_FMAC4 soap_get___ns1__GetTensileTestRule(struct soap*, struct __ns1__GetTensileTestRule *, const char*, const char*);

inline int soap_read___ns1__GetTensileTestRule(struct soap *soap, struct __ns1__GetTensileTestRule *p)
{
	if (p)
	{	::soap_default___ns1__GetTensileTestRule(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetTensileTestRule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetTensileTestRule(struct soap *soap, const char *URL, struct __ns1__GetTensileTestRule *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetTensileTestRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetTensileTestRule(struct soap *soap, struct __ns1__GetTensileTestRule *p)
{
	if (::soap_read___ns1__GetTensileTestRule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetContainerDataInfoMES_DEFINED
#define SOAP_TYPE___ns1__GetContainerDataInfoMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetContainerDataInfoMES(struct soap*, struct __ns1__GetContainerDataInfoMES *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetContainerDataInfoMES(struct soap*, const struct __ns1__GetContainerDataInfoMES *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetContainerDataInfoMES(struct soap*, const char*, int, const struct __ns1__GetContainerDataInfoMES *, const char*);
SOAP_FMAC3 struct __ns1__GetContainerDataInfoMES * SOAP_FMAC4 soap_in___ns1__GetContainerDataInfoMES(struct soap*, const char*, struct __ns1__GetContainerDataInfoMES *, const char*);
SOAP_FMAC1 struct __ns1__GetContainerDataInfoMES * SOAP_FMAC2 soap_instantiate___ns1__GetContainerDataInfoMES(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetContainerDataInfoMES * soap_new___ns1__GetContainerDataInfoMES(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetContainerDataInfoMES(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetContainerDataInfoMES * soap_new_req___ns1__GetContainerDataInfoMES(
	struct soap *soap)
{
	struct __ns1__GetContainerDataInfoMES *_p = ::soap_new___ns1__GetContainerDataInfoMES(soap);
	if (_p)
	{	::soap_default___ns1__GetContainerDataInfoMES(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetContainerDataInfoMES * soap_new_set___ns1__GetContainerDataInfoMES(
	struct soap *soap,
	_ns1__GetContainerDataInfoMES *ns1__GetContainerDataInfoMES)
{
	struct __ns1__GetContainerDataInfoMES *_p = ::soap_new___ns1__GetContainerDataInfoMES(soap);
	if (_p)
	{	::soap_default___ns1__GetContainerDataInfoMES(soap, _p);
		_p->ns1__GetContainerDataInfoMES = ns1__GetContainerDataInfoMES;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetContainerDataInfoMES(struct soap*, const struct __ns1__GetContainerDataInfoMES *, const char*, const char*);

inline int soap_write___ns1__GetContainerDataInfoMES(struct soap *soap, struct __ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetContainerDataInfoMES(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetContainerDataInfoMES(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetContainerDataInfoMES(soap, p), 0) || ::soap_put___ns1__GetContainerDataInfoMES(soap, p, "-ns1:GetContainerDataInfoMES", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetContainerDataInfoMES * SOAP_FMAC4 soap_get___ns1__GetContainerDataInfoMES(struct soap*, struct __ns1__GetContainerDataInfoMES *, const char*, const char*);

inline int soap_read___ns1__GetContainerDataInfoMES(struct soap *soap, struct __ns1__GetContainerDataInfoMES *p)
{
	if (p)
	{	::soap_default___ns1__GetContainerDataInfoMES(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetContainerDataInfoMES(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetContainerDataInfoMES(struct soap *soap, const char *URL, struct __ns1__GetContainerDataInfoMES *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetContainerDataInfoMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetContainerDataInfoMES(struct soap *soap, struct __ns1__GetContainerDataInfoMES *p)
{
	if (::soap_read___ns1__GetContainerDataInfoMES(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__UploadTensileInfoToMes_DEFINED
#define SOAP_TYPE___ns1__UploadTensileInfoToMes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__UploadTensileInfoToMes(struct soap*, struct __ns1__UploadTensileInfoToMes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__UploadTensileInfoToMes(struct soap*, const struct __ns1__UploadTensileInfoToMes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__UploadTensileInfoToMes(struct soap*, const char*, int, const struct __ns1__UploadTensileInfoToMes *, const char*);
SOAP_FMAC3 struct __ns1__UploadTensileInfoToMes * SOAP_FMAC4 soap_in___ns1__UploadTensileInfoToMes(struct soap*, const char*, struct __ns1__UploadTensileInfoToMes *, const char*);
SOAP_FMAC1 struct __ns1__UploadTensileInfoToMes * SOAP_FMAC2 soap_instantiate___ns1__UploadTensileInfoToMes(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__UploadTensileInfoToMes * soap_new___ns1__UploadTensileInfoToMes(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__UploadTensileInfoToMes(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__UploadTensileInfoToMes * soap_new_req___ns1__UploadTensileInfoToMes(
	struct soap *soap)
{
	struct __ns1__UploadTensileInfoToMes *_p = ::soap_new___ns1__UploadTensileInfoToMes(soap);
	if (_p)
	{	::soap_default___ns1__UploadTensileInfoToMes(soap, _p);
	}
	return _p;
}

inline struct __ns1__UploadTensileInfoToMes * soap_new_set___ns1__UploadTensileInfoToMes(
	struct soap *soap,
	_ns1__UploadTensileInfoToMes *ns1__UploadTensileInfoToMes)
{
	struct __ns1__UploadTensileInfoToMes *_p = ::soap_new___ns1__UploadTensileInfoToMes(soap);
	if (_p)
	{	::soap_default___ns1__UploadTensileInfoToMes(soap, _p);
		_p->ns1__UploadTensileInfoToMes = ns1__UploadTensileInfoToMes;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__UploadTensileInfoToMes(struct soap*, const struct __ns1__UploadTensileInfoToMes *, const char*, const char*);

inline int soap_write___ns1__UploadTensileInfoToMes(struct soap *soap, struct __ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__UploadTensileInfoToMes(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UploadTensileInfoToMes(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__UploadTensileInfoToMes(soap, p), 0) || ::soap_put___ns1__UploadTensileInfoToMes(soap, p, "-ns1:UploadTensileInfoToMes", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__UploadTensileInfoToMes * SOAP_FMAC4 soap_get___ns1__UploadTensileInfoToMes(struct soap*, struct __ns1__UploadTensileInfoToMes *, const char*, const char*);

inline int soap_read___ns1__UploadTensileInfoToMes(struct soap *soap, struct __ns1__UploadTensileInfoToMes *p)
{
	if (p)
	{	::soap_default___ns1__UploadTensileInfoToMes(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__UploadTensileInfoToMes(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__UploadTensileInfoToMes(struct soap *soap, const char *URL, struct __ns1__UploadTensileInfoToMes *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__UploadTensileInfoToMes(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__UploadTensileInfoToMes(struct soap *soap, struct __ns1__UploadTensileInfoToMes *p)
{
	if (::soap_read___ns1__UploadTensileInfoToMes(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SafetyInfoMoveStd_DEFINED
#define SOAP_TYPE___ns1__SafetyInfoMoveStd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SafetyInfoMoveStd(struct soap*, struct __ns1__SafetyInfoMoveStd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SafetyInfoMoveStd(struct soap*, const struct __ns1__SafetyInfoMoveStd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SafetyInfoMoveStd(struct soap*, const char*, int, const struct __ns1__SafetyInfoMoveStd *, const char*);
SOAP_FMAC3 struct __ns1__SafetyInfoMoveStd * SOAP_FMAC4 soap_in___ns1__SafetyInfoMoveStd(struct soap*, const char*, struct __ns1__SafetyInfoMoveStd *, const char*);
SOAP_FMAC1 struct __ns1__SafetyInfoMoveStd * SOAP_FMAC2 soap_instantiate___ns1__SafetyInfoMoveStd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SafetyInfoMoveStd * soap_new___ns1__SafetyInfoMoveStd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SafetyInfoMoveStd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SafetyInfoMoveStd * soap_new_req___ns1__SafetyInfoMoveStd(
	struct soap *soap)
{
	struct __ns1__SafetyInfoMoveStd *_p = ::soap_new___ns1__SafetyInfoMoveStd(soap);
	if (_p)
	{	::soap_default___ns1__SafetyInfoMoveStd(soap, _p);
	}
	return _p;
}

inline struct __ns1__SafetyInfoMoveStd * soap_new_set___ns1__SafetyInfoMoveStd(
	struct soap *soap,
	_ns1__SafetyInfoMoveStd *ns1__SafetyInfoMoveStd)
{
	struct __ns1__SafetyInfoMoveStd *_p = ::soap_new___ns1__SafetyInfoMoveStd(soap);
	if (_p)
	{	::soap_default___ns1__SafetyInfoMoveStd(soap, _p);
		_p->ns1__SafetyInfoMoveStd = ns1__SafetyInfoMoveStd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SafetyInfoMoveStd(struct soap*, const struct __ns1__SafetyInfoMoveStd *, const char*, const char*);

inline int soap_write___ns1__SafetyInfoMoveStd(struct soap *soap, struct __ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__SafetyInfoMoveStd(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SafetyInfoMoveStd(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__SafetyInfoMoveStd(soap, p), 0) || ::soap_put___ns1__SafetyInfoMoveStd(soap, p, "-ns1:SafetyInfoMoveStd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SafetyInfoMoveStd * SOAP_FMAC4 soap_get___ns1__SafetyInfoMoveStd(struct soap*, struct __ns1__SafetyInfoMoveStd *, const char*, const char*);

inline int soap_read___ns1__SafetyInfoMoveStd(struct soap *soap, struct __ns1__SafetyInfoMoveStd *p)
{
	if (p)
	{	::soap_default___ns1__SafetyInfoMoveStd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__SafetyInfoMoveStd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__SafetyInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__SafetyInfoMoveStd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__SafetyInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__SafetyInfoMoveStd(struct soap *soap, struct __ns1__SafetyInfoMoveStd *p)
{
	if (::soap_read___ns1__SafetyInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ELInfoMoveStd_DEFINED
#define SOAP_TYPE___ns1__ELInfoMoveStd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ELInfoMoveStd(struct soap*, struct __ns1__ELInfoMoveStd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ELInfoMoveStd(struct soap*, const struct __ns1__ELInfoMoveStd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ELInfoMoveStd(struct soap*, const char*, int, const struct __ns1__ELInfoMoveStd *, const char*);
SOAP_FMAC3 struct __ns1__ELInfoMoveStd * SOAP_FMAC4 soap_in___ns1__ELInfoMoveStd(struct soap*, const char*, struct __ns1__ELInfoMoveStd *, const char*);
SOAP_FMAC1 struct __ns1__ELInfoMoveStd * SOAP_FMAC2 soap_instantiate___ns1__ELInfoMoveStd(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ELInfoMoveStd * soap_new___ns1__ELInfoMoveStd(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ELInfoMoveStd(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ELInfoMoveStd * soap_new_req___ns1__ELInfoMoveStd(
	struct soap *soap)
{
	struct __ns1__ELInfoMoveStd *_p = ::soap_new___ns1__ELInfoMoveStd(soap);
	if (_p)
	{	::soap_default___ns1__ELInfoMoveStd(soap, _p);
	}
	return _p;
}

inline struct __ns1__ELInfoMoveStd * soap_new_set___ns1__ELInfoMoveStd(
	struct soap *soap,
	_ns1__ELInfoMoveStd *ns1__ELInfoMoveStd)
{
	struct __ns1__ELInfoMoveStd *_p = ::soap_new___ns1__ELInfoMoveStd(soap);
	if (_p)
	{	::soap_default___ns1__ELInfoMoveStd(soap, _p);
		_p->ns1__ELInfoMoveStd = ns1__ELInfoMoveStd;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ELInfoMoveStd(struct soap*, const struct __ns1__ELInfoMoveStd *, const char*, const char*);

inline int soap_write___ns1__ELInfoMoveStd(struct soap *soap, struct __ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ELInfoMoveStd(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ELInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELInfoMoveStd(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ELInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELInfoMoveStd(soap, p), 0) || ::soap_put___ns1__ELInfoMoveStd(soap, p, "-ns1:ELInfoMoveStd", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ELInfoMoveStd * SOAP_FMAC4 soap_get___ns1__ELInfoMoveStd(struct soap*, struct __ns1__ELInfoMoveStd *, const char*, const char*);

inline int soap_read___ns1__ELInfoMoveStd(struct soap *soap, struct __ns1__ELInfoMoveStd *p)
{
	if (p)
	{	::soap_default___ns1__ELInfoMoveStd(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ELInfoMoveStd(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ELInfoMoveStd(struct soap *soap, const char *URL, struct __ns1__ELInfoMoveStd *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ELInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ELInfoMoveStd(struct soap *soap, struct __ns1__ELInfoMoveStd *p)
{
	if (::soap_read___ns1__ELInfoMoveStd(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__ELPictureAddress_DEFINED
#define SOAP_TYPE___ns1__ELPictureAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ELPictureAddress(struct soap*, struct __ns1__ELPictureAddress *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ELPictureAddress(struct soap*, const struct __ns1__ELPictureAddress *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ELPictureAddress(struct soap*, const char*, int, const struct __ns1__ELPictureAddress *, const char*);
SOAP_FMAC3 struct __ns1__ELPictureAddress * SOAP_FMAC4 soap_in___ns1__ELPictureAddress(struct soap*, const char*, struct __ns1__ELPictureAddress *, const char*);
SOAP_FMAC1 struct __ns1__ELPictureAddress * SOAP_FMAC2 soap_instantiate___ns1__ELPictureAddress(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ELPictureAddress * soap_new___ns1__ELPictureAddress(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__ELPictureAddress(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__ELPictureAddress * soap_new_req___ns1__ELPictureAddress(
	struct soap *soap)
{
	struct __ns1__ELPictureAddress *_p = ::soap_new___ns1__ELPictureAddress(soap);
	if (_p)
	{	::soap_default___ns1__ELPictureAddress(soap, _p);
	}
	return _p;
}

inline struct __ns1__ELPictureAddress * soap_new_set___ns1__ELPictureAddress(
	struct soap *soap,
	_ns1__ELPictureAddress *ns1__ELPictureAddress)
{
	struct __ns1__ELPictureAddress *_p = ::soap_new___ns1__ELPictureAddress(soap);
	if (_p)
	{	::soap_default___ns1__ELPictureAddress(soap, _p);
		_p->ns1__ELPictureAddress = ns1__ELPictureAddress;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ELPictureAddress(struct soap*, const struct __ns1__ELPictureAddress *, const char*, const char*);

inline int soap_write___ns1__ELPictureAddress(struct soap *soap, struct __ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__ELPictureAddress(soap, p), 0) || ::soap_put___ns1__ELPictureAddress(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__ELPictureAddress(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELPictureAddress(soap, p), 0) || ::soap_put___ns1__ELPictureAddress(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__ELPictureAddress(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__ELPictureAddress(soap, p), 0) || ::soap_put___ns1__ELPictureAddress(soap, p, "-ns1:ELPictureAddress", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__ELPictureAddress * SOAP_FMAC4 soap_get___ns1__ELPictureAddress(struct soap*, struct __ns1__ELPictureAddress *, const char*, const char*);

inline int soap_read___ns1__ELPictureAddress(struct soap *soap, struct __ns1__ELPictureAddress *p)
{
	if (p)
	{	::soap_default___ns1__ELPictureAddress(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__ELPictureAddress(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__ELPictureAddress(struct soap *soap, const char *URL, struct __ns1__ELPictureAddress *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__ELPictureAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__ELPictureAddress(struct soap *soap, struct __ns1__ELPictureAddress *p)
{
	if (::soap_read___ns1__ELPictureAddress(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__jKoIVMoveStd_USCORESpire_DEFINED
#define SOAP_TYPE___ns1__jKoIVMoveStd_USCORESpire_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__jKoIVMoveStd_USCORESpire(struct soap*, struct __ns1__jKoIVMoveStd_USCORESpire *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__jKoIVMoveStd_USCORESpire(struct soap*, const struct __ns1__jKoIVMoveStd_USCORESpire *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char*, int, const struct __ns1__jKoIVMoveStd_USCORESpire *, const char*);
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC4 soap_in___ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char*, struct __ns1__jKoIVMoveStd_USCORESpire *, const char*);
SOAP_FMAC1 struct __ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC2 soap_instantiate___ns1__jKoIVMoveStd_USCORESpire(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__jKoIVMoveStd_USCORESpire * soap_new___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__jKoIVMoveStd_USCORESpire(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__jKoIVMoveStd_USCORESpire * soap_new_req___ns1__jKoIVMoveStd_USCORESpire(
	struct soap *soap)
{
	struct __ns1__jKoIVMoveStd_USCORESpire *_p = ::soap_new___ns1__jKoIVMoveStd_USCORESpire(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire(soap, _p);
	}
	return _p;
}

inline struct __ns1__jKoIVMoveStd_USCORESpire * soap_new_set___ns1__jKoIVMoveStd_USCORESpire(
	struct soap *soap,
	_ns1__jKoIVMoveStd_USCORESpire *ns1__jKoIVMoveStd_USCORESpire)
{
	struct __ns1__jKoIVMoveStd_USCORESpire *_p = ::soap_new___ns1__jKoIVMoveStd_USCORESpire(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire(soap, _p);
		_p->ns1__jKoIVMoveStd_USCORESpire = ns1__jKoIVMoveStd_USCORESpire;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__jKoIVMoveStd_USCORESpire(struct soap*, const struct __ns1__jKoIVMoveStd_USCORESpire *, const char*, const char*);

inline int soap_write___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCORESpire(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCORESpire(soap, p, "-ns1:jKoIVMoveStd_Spire", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCORESpire * SOAP_FMAC4 soap_get___ns1__jKoIVMoveStd_USCORESpire(struct soap*, struct __ns1__jKoIVMoveStd_USCORESpire *, const char*, const char*);

inline int soap_read___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (p)
	{	::soap_default___ns1__jKoIVMoveStd_USCORESpire(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__jKoIVMoveStd_USCORESpire(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__jKoIVMoveStd_USCORESpire(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__jKoIVMoveStd_USCORESpire(struct soap *soap, struct __ns1__jKoIVMoveStd_USCORESpire *p)
{
	if (::soap_read___ns1__jKoIVMoveStd_USCORESpire(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__jKoIVMoveStd_USCOREPasan_DEFINED
#define SOAP_TYPE___ns1__jKoIVMoveStd_USCOREPasan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, struct __ns1__jKoIVMoveStd_USCOREPasan *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const struct __ns1__jKoIVMoveStd_USCOREPasan *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char*, int, const struct __ns1__jKoIVMoveStd_USCOREPasan *, const char*);
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC4 soap_in___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char*, struct __ns1__jKoIVMoveStd_USCOREPasan *, const char*);
SOAP_FMAC1 struct __ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC2 soap_instantiate___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__jKoIVMoveStd_USCOREPasan * soap_new___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__jKoIVMoveStd_USCOREPasan(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__jKoIVMoveStd_USCOREPasan * soap_new_req___ns1__jKoIVMoveStd_USCOREPasan(
	struct soap *soap)
{
	struct __ns1__jKoIVMoveStd_USCOREPasan *_p = ::soap_new___ns1__jKoIVMoveStd_USCOREPasan(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan(soap, _p);
	}
	return _p;
}

inline struct __ns1__jKoIVMoveStd_USCOREPasan * soap_new_set___ns1__jKoIVMoveStd_USCOREPasan(
	struct soap *soap,
	_ns1__jKoIVMoveStd_USCOREPasan *ns1__jKoIVMoveStd_USCOREPasan)
{
	struct __ns1__jKoIVMoveStd_USCOREPasan *_p = ::soap_new___ns1__jKoIVMoveStd_USCOREPasan(soap);
	if (_p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan(soap, _p);
		_p->ns1__jKoIVMoveStd_USCOREPasan = ns1__jKoIVMoveStd_USCOREPasan;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const struct __ns1__jKoIVMoveStd_USCOREPasan *, const char*, const char*);

inline int soap_write___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__jKoIVMoveStd_USCOREPasan(soap, p), 0) || ::soap_put___ns1__jKoIVMoveStd_USCOREPasan(soap, p, "-ns1:jKoIVMoveStd_Pasan", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__jKoIVMoveStd_USCOREPasan * SOAP_FMAC4 soap_get___ns1__jKoIVMoveStd_USCOREPasan(struct soap*, struct __ns1__jKoIVMoveStd_USCOREPasan *, const char*, const char*);

inline int soap_read___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (p)
	{	::soap_default___ns1__jKoIVMoveStd_USCOREPasan(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__jKoIVMoveStd_USCOREPasan(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, const char *URL, struct __ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__jKoIVMoveStd_USCOREPasan(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__jKoIVMoveStd_USCOREPasan(struct soap *soap, struct __ns1__jKoIVMoveStd_USCOREPasan *p)
{
	if (::soap_read___ns1__jKoIVMoveStd_USCOREPasan(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__IV_USCOREDataCollection_DEFINED
#define SOAP_TYPE___ns1__IV_USCOREDataCollection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__IV_USCOREDataCollection(struct soap*, struct __ns1__IV_USCOREDataCollection *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__IV_USCOREDataCollection(struct soap*, const struct __ns1__IV_USCOREDataCollection *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__IV_USCOREDataCollection(struct soap*, const char*, int, const struct __ns1__IV_USCOREDataCollection *, const char*);
SOAP_FMAC3 struct __ns1__IV_USCOREDataCollection * SOAP_FMAC4 soap_in___ns1__IV_USCOREDataCollection(struct soap*, const char*, struct __ns1__IV_USCOREDataCollection *, const char*);
SOAP_FMAC1 struct __ns1__IV_USCOREDataCollection * SOAP_FMAC2 soap_instantiate___ns1__IV_USCOREDataCollection(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__IV_USCOREDataCollection * soap_new___ns1__IV_USCOREDataCollection(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__IV_USCOREDataCollection(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__IV_USCOREDataCollection * soap_new_req___ns1__IV_USCOREDataCollection(
	struct soap *soap)
{
	struct __ns1__IV_USCOREDataCollection *_p = ::soap_new___ns1__IV_USCOREDataCollection(soap);
	if (_p)
	{	::soap_default___ns1__IV_USCOREDataCollection(soap, _p);
	}
	return _p;
}

inline struct __ns1__IV_USCOREDataCollection * soap_new_set___ns1__IV_USCOREDataCollection(
	struct soap *soap,
	_ns1__IV_USCOREDataCollection *ns1__IV_USCOREDataCollection)
{
	struct __ns1__IV_USCOREDataCollection *_p = ::soap_new___ns1__IV_USCOREDataCollection(soap);
	if (_p)
	{	::soap_default___ns1__IV_USCOREDataCollection(soap, _p);
		_p->ns1__IV_USCOREDataCollection = ns1__IV_USCOREDataCollection;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__IV_USCOREDataCollection(struct soap*, const struct __ns1__IV_USCOREDataCollection *, const char*, const char*);

inline int soap_write___ns1__IV_USCOREDataCollection(struct soap *soap, struct __ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__IV_USCOREDataCollection(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__IV_USCOREDataCollection(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__IV_USCOREDataCollection(soap, p), 0) || ::soap_put___ns1__IV_USCOREDataCollection(soap, p, "-ns1:IV_DataCollection", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__IV_USCOREDataCollection * SOAP_FMAC4 soap_get___ns1__IV_USCOREDataCollection(struct soap*, struct __ns1__IV_USCOREDataCollection *, const char*, const char*);

inline int soap_read___ns1__IV_USCOREDataCollection(struct soap *soap, struct __ns1__IV_USCOREDataCollection *p)
{
	if (p)
	{	::soap_default___ns1__IV_USCOREDataCollection(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__IV_USCOREDataCollection(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__IV_USCOREDataCollection(struct soap *soap, const char *URL, struct __ns1__IV_USCOREDataCollection *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__IV_USCOREDataCollection(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__IV_USCOREDataCollection(struct soap *soap, struct __ns1__IV_USCOREDataCollection *p)
{
	if (::soap_read___ns1__IV_USCOREDataCollection(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetCurrentSpecBySn_DEFINED
#define SOAP_TYPE___ns1__GetCurrentSpecBySn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetCurrentSpecBySn(struct soap*, struct __ns1__GetCurrentSpecBySn *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetCurrentSpecBySn(struct soap*, const struct __ns1__GetCurrentSpecBySn *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetCurrentSpecBySn(struct soap*, const char*, int, const struct __ns1__GetCurrentSpecBySn *, const char*);
SOAP_FMAC3 struct __ns1__GetCurrentSpecBySn * SOAP_FMAC4 soap_in___ns1__GetCurrentSpecBySn(struct soap*, const char*, struct __ns1__GetCurrentSpecBySn *, const char*);
SOAP_FMAC1 struct __ns1__GetCurrentSpecBySn * SOAP_FMAC2 soap_instantiate___ns1__GetCurrentSpecBySn(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetCurrentSpecBySn * soap_new___ns1__GetCurrentSpecBySn(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetCurrentSpecBySn(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetCurrentSpecBySn * soap_new_req___ns1__GetCurrentSpecBySn(
	struct soap *soap)
{
	struct __ns1__GetCurrentSpecBySn *_p = ::soap_new___ns1__GetCurrentSpecBySn(soap);
	if (_p)
	{	::soap_default___ns1__GetCurrentSpecBySn(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetCurrentSpecBySn * soap_new_set___ns1__GetCurrentSpecBySn(
	struct soap *soap,
	_ns1__GetCurrentSpecBySn *ns1__GetCurrentSpecBySn)
{
	struct __ns1__GetCurrentSpecBySn *_p = ::soap_new___ns1__GetCurrentSpecBySn(soap);
	if (_p)
	{	::soap_default___ns1__GetCurrentSpecBySn(soap, _p);
		_p->ns1__GetCurrentSpecBySn = ns1__GetCurrentSpecBySn;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetCurrentSpecBySn(struct soap*, const struct __ns1__GetCurrentSpecBySn *, const char*, const char*);

inline int soap_write___ns1__GetCurrentSpecBySn(struct soap *soap, struct __ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetCurrentSpecBySn(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetCurrentSpecBySn(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetCurrentSpecBySn(soap, p), 0) || ::soap_put___ns1__GetCurrentSpecBySn(soap, p, "-ns1:GetCurrentSpecBySn", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetCurrentSpecBySn * SOAP_FMAC4 soap_get___ns1__GetCurrentSpecBySn(struct soap*, struct __ns1__GetCurrentSpecBySn *, const char*, const char*);

inline int soap_read___ns1__GetCurrentSpecBySn(struct soap *soap, struct __ns1__GetCurrentSpecBySn *p)
{
	if (p)
	{	::soap_default___ns1__GetCurrentSpecBySn(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetCurrentSpecBySn(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetCurrentSpecBySn(struct soap *soap, const char *URL, struct __ns1__GetCurrentSpecBySn *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetCurrentSpecBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetCurrentSpecBySn(struct soap *soap, struct __ns1__GetCurrentSpecBySn *p)
{
	if (::soap_read___ns1__GetCurrentSpecBySn(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetWorkCenterID_DEFINED
#define SOAP_TYPE___ns1__GetWorkCenterID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetWorkCenterID(struct soap*, struct __ns1__GetWorkCenterID *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetWorkCenterID(struct soap*, const struct __ns1__GetWorkCenterID *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetWorkCenterID(struct soap*, const char*, int, const struct __ns1__GetWorkCenterID *, const char*);
SOAP_FMAC3 struct __ns1__GetWorkCenterID * SOAP_FMAC4 soap_in___ns1__GetWorkCenterID(struct soap*, const char*, struct __ns1__GetWorkCenterID *, const char*);
SOAP_FMAC1 struct __ns1__GetWorkCenterID * SOAP_FMAC2 soap_instantiate___ns1__GetWorkCenterID(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetWorkCenterID * soap_new___ns1__GetWorkCenterID(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetWorkCenterID(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetWorkCenterID * soap_new_req___ns1__GetWorkCenterID(
	struct soap *soap)
{
	struct __ns1__GetWorkCenterID *_p = ::soap_new___ns1__GetWorkCenterID(soap);
	if (_p)
	{	::soap_default___ns1__GetWorkCenterID(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetWorkCenterID * soap_new_set___ns1__GetWorkCenterID(
	struct soap *soap,
	_ns1__GetWorkCenterID *ns1__GetWorkCenterID)
{
	struct __ns1__GetWorkCenterID *_p = ::soap_new___ns1__GetWorkCenterID(soap);
	if (_p)
	{	::soap_default___ns1__GetWorkCenterID(soap, _p);
		_p->ns1__GetWorkCenterID = ns1__GetWorkCenterID;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetWorkCenterID(struct soap*, const struct __ns1__GetWorkCenterID *, const char*, const char*);

inline int soap_write___ns1__GetWorkCenterID(struct soap *soap, struct __ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetWorkCenterID(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetWorkCenterID(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWorkCenterID(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetWorkCenterID(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetWorkCenterID(soap, p), 0) || ::soap_put___ns1__GetWorkCenterID(soap, p, "-ns1:GetWorkCenterID", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetWorkCenterID * SOAP_FMAC4 soap_get___ns1__GetWorkCenterID(struct soap*, struct __ns1__GetWorkCenterID *, const char*, const char*);

inline int soap_read___ns1__GetWorkCenterID(struct soap *soap, struct __ns1__GetWorkCenterID *p)
{
	if (p)
	{	::soap_default___ns1__GetWorkCenterID(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetWorkCenterID(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetWorkCenterID(struct soap *soap, const char *URL, struct __ns1__GetWorkCenterID *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetWorkCenterID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetWorkCenterID(struct soap *soap, struct __ns1__GetWorkCenterID *p)
{
	if (::soap_read___ns1__GetWorkCenterID(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Login_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap*, _ns1__Login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap*, const char *, int, _ns1__Login *const*, const char *);
SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap*, const char*, _ns1__Login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap*, _ns1__Login *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap*, _ns1__Login **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CanLogin_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CanLogin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CanLogin(struct soap*, _ns1__CanLogin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CanLogin(struct soap*, const char *, int, _ns1__CanLogin *const*, const char *);
SOAP_FMAC3 _ns1__CanLogin ** SOAP_FMAC4 soap_in_PointerTo_ns1__CanLogin(struct soap*, const char*, _ns1__CanLogin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CanLogin(struct soap*, _ns1__CanLogin *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CanLogin ** SOAP_FMAC4 soap_get_PointerTo_ns1__CanLogin(struct soap*, _ns1__CanLogin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char *, int, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *const*, const char *);
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs ** SOAP_FMAC4 soap_in_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, const char*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs ** SOAP_FMAC4 soap_get_PointerTo_ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs(struct soap*, _ns1__Upload_USCOREFIDWUL_USCOREDATAFLAGs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetMaterialBatchResultToMES_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetMaterialBatchResultToMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetMaterialBatchResultToMES(struct soap*, _ns1__SetMaterialBatchResultToMES *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetMaterialBatchResultToMES(struct soap*, const char *, int, _ns1__SetMaterialBatchResultToMES *const*, const char *);
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMES ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetMaterialBatchResultToMES(struct soap*, const char*, _ns1__SetMaterialBatchResultToMES **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetMaterialBatchResultToMES(struct soap*, _ns1__SetMaterialBatchResultToMES *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetMaterialBatchResultToMES ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetMaterialBatchResultToMES(struct soap*, _ns1__SetMaterialBatchResultToMES **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SetDefectResultToMES_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SetDefectResultToMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetDefectResultToMES(struct soap*, _ns1__SetDefectResultToMES *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetDefectResultToMES(struct soap*, const char *, int, _ns1__SetDefectResultToMES *const*, const char *);
SOAP_FMAC3 _ns1__SetDefectResultToMES ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetDefectResultToMES(struct soap*, const char*, _ns1__SetDefectResultToMES **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetDefectResultToMES(struct soap*, _ns1__SetDefectResultToMES *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SetDefectResultToMES ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetDefectResultToMES(struct soap*, _ns1__SetDefectResultToMES **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetDefectInfoToSAP_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetDefectInfoToSAP_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetDefectInfoToSAP(struct soap*, _ns1__GetDefectInfoToSAP *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetDefectInfoToSAP(struct soap*, const char *, int, _ns1__GetDefectInfoToSAP *const*, const char *);
SOAP_FMAC3 _ns1__GetDefectInfoToSAP ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetDefectInfoToSAP(struct soap*, const char*, _ns1__GetDefectInfoToSAP **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetDefectInfoToSAP(struct soap*, _ns1__GetDefectInfoToSAP *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetDefectInfoToSAP ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetDefectInfoToSAP(struct soap*, _ns1__GetDefectInfoToSAP **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetFtpAddress_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetFtpAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetFtpAddress(struct soap*, _ns1__GetFtpAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetFtpAddress(struct soap*, const char *, int, _ns1__GetFtpAddress *const*, const char *);
SOAP_FMAC3 _ns1__GetFtpAddress ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetFtpAddress(struct soap*, const char*, _ns1__GetFtpAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetFtpAddress(struct soap*, _ns1__GetFtpAddress *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetFtpAddress ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetFtpAddress(struct soap*, _ns1__GetFtpAddress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Iscalibrationcontainer_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Iscalibrationcontainer_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Iscalibrationcontainer(struct soap*, _ns1__Iscalibrationcontainer *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Iscalibrationcontainer(struct soap*, const char *, int, _ns1__Iscalibrationcontainer *const*, const char *);
SOAP_FMAC3 _ns1__Iscalibrationcontainer ** SOAP_FMAC4 soap_in_PointerTo_ns1__Iscalibrationcontainer(struct soap*, const char*, _ns1__Iscalibrationcontainer **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Iscalibrationcontainer(struct soap*, _ns1__Iscalibrationcontainer *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Iscalibrationcontainer ** SOAP_FMAC4 soap_get_PointerTo_ns1__Iscalibrationcontainer(struct soap*, _ns1__Iscalibrationcontainer **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetTensileTestRule_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetTensileTestRule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTensileTestRule(struct soap*, _ns1__GetTensileTestRule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTensileTestRule(struct soap*, const char *, int, _ns1__GetTensileTestRule *const*, const char *);
SOAP_FMAC3 _ns1__GetTensileTestRule ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTensileTestRule(struct soap*, const char*, _ns1__GetTensileTestRule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTensileTestRule(struct soap*, _ns1__GetTensileTestRule *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetTensileTestRule ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTensileTestRule(struct soap*, _ns1__GetTensileTestRule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetContainerDataInfoMES_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetContainerDataInfoMES_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetContainerDataInfoMES(struct soap*, _ns1__GetContainerDataInfoMES *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetContainerDataInfoMES(struct soap*, const char *, int, _ns1__GetContainerDataInfoMES *const*, const char *);
SOAP_FMAC3 _ns1__GetContainerDataInfoMES ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetContainerDataInfoMES(struct soap*, const char*, _ns1__GetContainerDataInfoMES **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetContainerDataInfoMES(struct soap*, _ns1__GetContainerDataInfoMES *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetContainerDataInfoMES ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetContainerDataInfoMES(struct soap*, _ns1__GetContainerDataInfoMES **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__UploadTensileInfoToMes_DEFINED
#define SOAP_TYPE_PointerTo_ns1__UploadTensileInfoToMes_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadTensileInfoToMes(struct soap*, _ns1__UploadTensileInfoToMes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadTensileInfoToMes(struct soap*, const char *, int, _ns1__UploadTensileInfoToMes *const*, const char *);
SOAP_FMAC3 _ns1__UploadTensileInfoToMes ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadTensileInfoToMes(struct soap*, const char*, _ns1__UploadTensileInfoToMes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadTensileInfoToMes(struct soap*, _ns1__UploadTensileInfoToMes *const*, const char*, const char*);
SOAP_FMAC3 _ns1__UploadTensileInfoToMes ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadTensileInfoToMes(struct soap*, _ns1__UploadTensileInfoToMes **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SafetyInfoMoveStd_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SafetyInfoMoveStd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SafetyInfoMoveStd(struct soap*, _ns1__SafetyInfoMoveStd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SafetyInfoMoveStd(struct soap*, const char *, int, _ns1__SafetyInfoMoveStd *const*, const char *);
SOAP_FMAC3 _ns1__SafetyInfoMoveStd ** SOAP_FMAC4 soap_in_PointerTo_ns1__SafetyInfoMoveStd(struct soap*, const char*, _ns1__SafetyInfoMoveStd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SafetyInfoMoveStd(struct soap*, _ns1__SafetyInfoMoveStd *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SafetyInfoMoveStd ** SOAP_FMAC4 soap_get_PointerTo_ns1__SafetyInfoMoveStd(struct soap*, _ns1__SafetyInfoMoveStd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ELInfoMoveStd_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ELInfoMoveStd_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ELInfoMoveStd(struct soap*, _ns1__ELInfoMoveStd *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ELInfoMoveStd(struct soap*, const char *, int, _ns1__ELInfoMoveStd *const*, const char *);
SOAP_FMAC3 _ns1__ELInfoMoveStd ** SOAP_FMAC4 soap_in_PointerTo_ns1__ELInfoMoveStd(struct soap*, const char*, _ns1__ELInfoMoveStd **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ELInfoMoveStd(struct soap*, _ns1__ELInfoMoveStd *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ELInfoMoveStd ** SOAP_FMAC4 soap_get_PointerTo_ns1__ELInfoMoveStd(struct soap*, _ns1__ELInfoMoveStd **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__ELPictureAddress_DEFINED
#define SOAP_TYPE_PointerTo_ns1__ELPictureAddress_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ELPictureAddress(struct soap*, _ns1__ELPictureAddress *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ELPictureAddress(struct soap*, const char *, int, _ns1__ELPictureAddress *const*, const char *);
SOAP_FMAC3 _ns1__ELPictureAddress ** SOAP_FMAC4 soap_in_PointerTo_ns1__ELPictureAddress(struct soap*, const char*, _ns1__ELPictureAddress **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ELPictureAddress(struct soap*, _ns1__ELPictureAddress *const*, const char*, const char*);
SOAP_FMAC3 _ns1__ELPictureAddress ** SOAP_FMAC4 soap_get_PointerTo_ns1__ELPictureAddress(struct soap*, _ns1__ELPictureAddress **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__jKoIVMoveStd_USCORESpire_DEFINED
#define SOAP_TYPE_PointerTo_ns1__jKoIVMoveStd_USCORESpire_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__jKoIVMoveStd_USCORESpire(struct soap*, _ns1__jKoIVMoveStd_USCORESpire *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char *, int, _ns1__jKoIVMoveStd_USCORESpire *const*, const char *);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpire ** SOAP_FMAC4 soap_in_PointerTo_ns1__jKoIVMoveStd_USCORESpire(struct soap*, const char*, _ns1__jKoIVMoveStd_USCORESpire **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__jKoIVMoveStd_USCORESpire(struct soap*, _ns1__jKoIVMoveStd_USCORESpire *const*, const char*, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCORESpire ** SOAP_FMAC4 soap_get_PointerTo_ns1__jKoIVMoveStd_USCORESpire(struct soap*, _ns1__jKoIVMoveStd_USCORESpire **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__jKoIVMoveStd_USCOREPasan_DEFINED
#define SOAP_TYPE_PointerTo_ns1__jKoIVMoveStd_USCOREPasan_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__jKoIVMoveStd_USCOREPasan(struct soap*, _ns1__jKoIVMoveStd_USCOREPasan *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char *, int, _ns1__jKoIVMoveStd_USCOREPasan *const*, const char *);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasan ** SOAP_FMAC4 soap_in_PointerTo_ns1__jKoIVMoveStd_USCOREPasan(struct soap*, const char*, _ns1__jKoIVMoveStd_USCOREPasan **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__jKoIVMoveStd_USCOREPasan(struct soap*, _ns1__jKoIVMoveStd_USCOREPasan *const*, const char*, const char*);
SOAP_FMAC3 _ns1__jKoIVMoveStd_USCOREPasan ** SOAP_FMAC4 soap_get_PointerTo_ns1__jKoIVMoveStd_USCOREPasan(struct soap*, _ns1__jKoIVMoveStd_USCOREPasan **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__IV_USCOREDataCollection_DEFINED
#define SOAP_TYPE_PointerTo_ns1__IV_USCOREDataCollection_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__IV_USCOREDataCollection(struct soap*, _ns1__IV_USCOREDataCollection *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__IV_USCOREDataCollection(struct soap*, const char *, int, _ns1__IV_USCOREDataCollection *const*, const char *);
SOAP_FMAC3 _ns1__IV_USCOREDataCollection ** SOAP_FMAC4 soap_in_PointerTo_ns1__IV_USCOREDataCollection(struct soap*, const char*, _ns1__IV_USCOREDataCollection **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__IV_USCOREDataCollection(struct soap*, _ns1__IV_USCOREDataCollection *const*, const char*, const char*);
SOAP_FMAC3 _ns1__IV_USCOREDataCollection ** SOAP_FMAC4 soap_get_PointerTo_ns1__IV_USCOREDataCollection(struct soap*, _ns1__IV_USCOREDataCollection **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetCurrentSpecBySn_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetCurrentSpecBySn_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCurrentSpecBySn(struct soap*, _ns1__GetCurrentSpecBySn *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCurrentSpecBySn(struct soap*, const char *, int, _ns1__GetCurrentSpecBySn *const*, const char *);
SOAP_FMAC3 _ns1__GetCurrentSpecBySn ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCurrentSpecBySn(struct soap*, const char*, _ns1__GetCurrentSpecBySn **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCurrentSpecBySn(struct soap*, _ns1__GetCurrentSpecBySn *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetCurrentSpecBySn ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCurrentSpecBySn(struct soap*, _ns1__GetCurrentSpecBySn **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetWorkCenterID_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetWorkCenterID_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetWorkCenterID(struct soap*, _ns1__GetWorkCenterID *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetWorkCenterID(struct soap*, const char *, int, _ns1__GetWorkCenterID *const*, const char *);
SOAP_FMAC3 _ns1__GetWorkCenterID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetWorkCenterID(struct soap*, const char*, _ns1__GetWorkCenterID **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetWorkCenterID(struct soap*, _ns1__GetWorkCenterID *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetWorkCenterID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetWorkCenterID(struct soap*, _ns1__GetWorkCenterID **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfFIDailyWorkReturnEntity_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfFIDailyWorkReturnEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfFIDailyWorkReturnEntity(struct soap*, ns1__ArrayOfFIDailyWorkReturnEntity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfFIDailyWorkReturnEntity(struct soap*, const char *, int, ns1__ArrayOfFIDailyWorkReturnEntity *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfFIDailyWorkReturnEntity ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfFIDailyWorkReturnEntity(struct soap*, const char*, ns1__ArrayOfFIDailyWorkReturnEntity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfFIDailyWorkReturnEntity(struct soap*, ns1__ArrayOfFIDailyWorkReturnEntity *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfFIDailyWorkReturnEntity ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfFIDailyWorkReturnEntity(struct soap*, ns1__ArrayOfFIDailyWorkReturnEntity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfMaterialBatchResultInfo_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfMaterialBatchResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfMaterialBatchResultInfo(struct soap*, ns1__ArrayOfMaterialBatchResultInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfMaterialBatchResultInfo(struct soap*, const char *, int, ns1__ArrayOfMaterialBatchResultInfo *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfMaterialBatchResultInfo ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfMaterialBatchResultInfo(struct soap*, const char*, ns1__ArrayOfMaterialBatchResultInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfMaterialBatchResultInfo(struct soap*, ns1__ArrayOfMaterialBatchResultInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfMaterialBatchResultInfo ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfMaterialBatchResultInfo(struct soap*, ns1__ArrayOfMaterialBatchResultInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfDefectResultInfo_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfDefectResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfDefectResultInfo(struct soap*, ns1__ArrayOfDefectResultInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfDefectResultInfo(struct soap*, const char *, int, ns1__ArrayOfDefectResultInfo *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfDefectResultInfo ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfDefectResultInfo(struct soap*, const char*, ns1__ArrayOfDefectResultInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfDefectResultInfo(struct soap*, ns1__ArrayOfDefectResultInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfDefectResultInfo ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfDefectResultInfo(struct soap*, ns1__ArrayOfDefectResultInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ArrayOfSubmitResult_DEFINED
#define SOAP_TYPE_PointerTons1__ArrayOfSubmitResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfSubmitResult(struct soap*, ns1__ArrayOfSubmitResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfSubmitResult(struct soap*, const char *, int, ns1__ArrayOfSubmitResult *const*, const char *);
SOAP_FMAC3 ns1__ArrayOfSubmitResult ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfSubmitResult(struct soap*, const char*, ns1__ArrayOfSubmitResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfSubmitResult(struct soap*, ns1__ArrayOfSubmitResult *const*, const char*, const char*);
SOAP_FMAC3 ns1__ArrayOfSubmitResult ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfSubmitResult(struct soap*, ns1__ArrayOfSubmitResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FIDailyWorkReturnEntity_DEFINED
#define SOAP_TYPE_PointerTons1__FIDailyWorkReturnEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FIDailyWorkReturnEntity(struct soap*, ns1__FIDailyWorkReturnEntity *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FIDailyWorkReturnEntity(struct soap*, const char *, int, ns1__FIDailyWorkReturnEntity *const*, const char *);
SOAP_FMAC3 ns1__FIDailyWorkReturnEntity ** SOAP_FMAC4 soap_in_PointerTons1__FIDailyWorkReturnEntity(struct soap*, const char*, ns1__FIDailyWorkReturnEntity **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FIDailyWorkReturnEntity(struct soap*, ns1__FIDailyWorkReturnEntity *const*, const char*, const char*);
SOAP_FMAC3 ns1__FIDailyWorkReturnEntity ** SOAP_FMAC4 soap_get_PointerTons1__FIDailyWorkReturnEntity(struct soap*, ns1__FIDailyWorkReturnEntity **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MaterialBatchResultInfo_DEFINED
#define SOAP_TYPE_PointerTons1__MaterialBatchResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MaterialBatchResultInfo(struct soap*, ns1__MaterialBatchResultInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MaterialBatchResultInfo(struct soap*, const char *, int, ns1__MaterialBatchResultInfo *const*, const char *);
SOAP_FMAC3 ns1__MaterialBatchResultInfo ** SOAP_FMAC4 soap_in_PointerTons1__MaterialBatchResultInfo(struct soap*, const char*, ns1__MaterialBatchResultInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MaterialBatchResultInfo(struct soap*, ns1__MaterialBatchResultInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__MaterialBatchResultInfo ** SOAP_FMAC4 soap_get_PointerTons1__MaterialBatchResultInfo(struct soap*, ns1__MaterialBatchResultInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DefectResultInfo_DEFINED
#define SOAP_TYPE_PointerTons1__DefectResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DefectResultInfo(struct soap*, ns1__DefectResultInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DefectResultInfo(struct soap*, const char *, int, ns1__DefectResultInfo *const*, const char *);
SOAP_FMAC3 ns1__DefectResultInfo ** SOAP_FMAC4 soap_in_PointerTons1__DefectResultInfo(struct soap*, const char*, ns1__DefectResultInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DefectResultInfo(struct soap*, ns1__DefectResultInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__DefectResultInfo ** SOAP_FMAC4 soap_get_PointerTons1__DefectResultInfo(struct soap*, ns1__DefectResultInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SubmitResult_DEFINED
#define SOAP_TYPE_PointerTons1__SubmitResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SubmitResult(struct soap*, ns1__SubmitResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SubmitResult(struct soap*, const char *, int, ns1__SubmitResult *const*, const char *);
SOAP_FMAC3 ns1__SubmitResult ** SOAP_FMAC4 soap_in_PointerTons1__SubmitResult(struct soap*, const char*, ns1__SubmitResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SubmitResult(struct soap*, ns1__SubmitResult *const*, const char*, const char*);
SOAP_FMAC3 ns1__SubmitResult ** SOAP_FMAC4 soap_get_PointerTons1__SubmitResult(struct soap*, ns1__SubmitResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SubmitResult_ResultTable_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SubmitResult_ResultTable_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SubmitResult_ResultTable(struct soap*, _ns1__SubmitResult_ResultTable *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SubmitResult_ResultTable(struct soap*, const char *, int, _ns1__SubmitResult_ResultTable *const*, const char *);
SOAP_FMAC3 _ns1__SubmitResult_ResultTable ** SOAP_FMAC4 soap_in_PointerTo_ns1__SubmitResult_ResultTable(struct soap*, const char*, _ns1__SubmitResult_ResultTable **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SubmitResult_ResultTable(struct soap*, _ns1__SubmitResult_ResultTable *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SubmitResult_ResultTable ** SOAP_FMAC4 soap_get_PointerTo_ns1__SubmitResult_ResultTable(struct soap*, _ns1__SubmitResult_ResultTable **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap*, std::vector<ns1__FIDailyWorkReturnEntity *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap*, const std::vector<ns1__FIDailyWorkReturnEntity *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap*, const char*, int, const std::vector<ns1__FIDailyWorkReturnEntity *> *, const char*);
SOAP_FMAC3 std::vector<ns1__FIDailyWorkReturnEntity *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap*, const char*, std::vector<ns1__FIDailyWorkReturnEntity *> *, const char*);
SOAP_FMAC1 std::vector<ns1__FIDailyWorkReturnEntity *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__FIDailyWorkReturnEntity *>  * soap_new_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__FIDailyWorkReturnEntity(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap*, std::vector<ns1__MaterialBatchResultInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap*, const std::vector<ns1__MaterialBatchResultInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap*, const char*, int, const std::vector<ns1__MaterialBatchResultInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns1__MaterialBatchResultInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap*, const char*, std::vector<ns1__MaterialBatchResultInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns1__MaterialBatchResultInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__MaterialBatchResultInfo *>  * soap_new_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__MaterialBatchResultInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__DefectResultInfo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__DefectResultInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap*, std::vector<ns1__DefectResultInfo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap*, const std::vector<ns1__DefectResultInfo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap*, const char*, int, const std::vector<ns1__DefectResultInfo *> *, const char*);
SOAP_FMAC3 std::vector<ns1__DefectResultInfo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap*, const char*, std::vector<ns1__DefectResultInfo *> *, const char*);
SOAP_FMAC1 std::vector<ns1__DefectResultInfo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__DefectResultInfo *>  * soap_new_std__vectorTemplateOfPointerTons1__DefectResultInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__DefectResultInfo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons1__SubmitResult_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerTons1__SubmitResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap*, std::vector<ns1__SubmitResult *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap*, const std::vector<ns1__SubmitResult *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap*, const char*, int, const std::vector<ns1__SubmitResult *> *, const char*);
SOAP_FMAC3 std::vector<ns1__SubmitResult *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap*, const char*, std::vector<ns1__SubmitResult *> *, const char*);
SOAP_FMAC1 std::vector<ns1__SubmitResult *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns1__SubmitResult *>  * soap_new_std__vectorTemplateOfPointerTons1__SubmitResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons1__SubmitResult(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
#define SOAP_TYPE_std__vectorTemplateOf_XML_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char *> *, const char*);
SOAP_FMAC3 std::vector<char *> * SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char *> *, const char*);
SOAP_FMAC1 std::vector<char *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char *>  * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
